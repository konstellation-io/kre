// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: nats.proto

package natspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NatsManagerServiceClient is the client API for NatsManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NatsManagerServiceClient interface {
	CreateStreams(ctx context.Context, in *CreateStreamsRequest, opts ...grpc.CallOption) (*CreateStreamsResponse, error)
	CreateObjectStores(ctx context.Context, in *CreateObjectStoresRequest, opts ...grpc.CallOption) (*CreateObjectStoresResponse, error)
	DeleteStreams(ctx context.Context, in *DeleteStreamsRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	DeleteObjectStores(ctx context.Context, in *DeleteObjectStoresRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreateKeyValueStores(ctx context.Context, in *CreateKeyValueStoresRequest, opts ...grpc.CallOption) (*CreateKeyValueStoreResponse, error)
}

type natsManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNatsManagerServiceClient(cc grpc.ClientConnInterface) NatsManagerServiceClient {
	return &natsManagerServiceClient{cc}
}

func (c *natsManagerServiceClient) CreateStreams(ctx context.Context, in *CreateStreamsRequest, opts ...grpc.CallOption) (*CreateStreamsResponse, error) {
	out := new(CreateStreamsResponse)
	err := c.cc.Invoke(ctx, "/nats.NatsManagerService/CreateStreams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natsManagerServiceClient) CreateObjectStores(ctx context.Context, in *CreateObjectStoresRequest, opts ...grpc.CallOption) (*CreateObjectStoresResponse, error) {
	out := new(CreateObjectStoresResponse)
	err := c.cc.Invoke(ctx, "/nats.NatsManagerService/CreateObjectStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natsManagerServiceClient) DeleteStreams(ctx context.Context, in *DeleteStreamsRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/nats.NatsManagerService/DeleteStreams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natsManagerServiceClient) DeleteObjectStores(ctx context.Context, in *DeleteObjectStoresRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/nats.NatsManagerService/DeleteObjectStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natsManagerServiceClient) CreateKeyValueStores(ctx context.Context, in *CreateKeyValueStoresRequest, opts ...grpc.CallOption) (*CreateKeyValueStoreResponse, error) {
	out := new(CreateKeyValueStoreResponse)
	err := c.cc.Invoke(ctx, "/nats.NatsManagerService/CreateKeyValueStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NatsManagerServiceServer is the server API for NatsManagerService service.
// All implementations must embed UnimplementedNatsManagerServiceServer
// for forward compatibility
type NatsManagerServiceServer interface {
	CreateStreams(context.Context, *CreateStreamsRequest) (*CreateStreamsResponse, error)
	CreateObjectStores(context.Context, *CreateObjectStoresRequest) (*CreateObjectStoresResponse, error)
	DeleteStreams(context.Context, *DeleteStreamsRequest) (*DeleteResponse, error)
	DeleteObjectStores(context.Context, *DeleteObjectStoresRequest) (*DeleteResponse, error)
	CreateKeyValueStores(context.Context, *CreateKeyValueStoresRequest) (*CreateKeyValueStoreResponse, error)
	mustEmbedUnimplementedNatsManagerServiceServer()
}

// UnimplementedNatsManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNatsManagerServiceServer struct {
}

func (UnimplementedNatsManagerServiceServer) CreateStreams(context.Context, *CreateStreamsRequest) (*CreateStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStreams not implemented")
}
func (UnimplementedNatsManagerServiceServer) CreateObjectStores(context.Context, *CreateObjectStoresRequest) (*CreateObjectStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectStores not implemented")
}
func (UnimplementedNatsManagerServiceServer) DeleteStreams(context.Context, *DeleteStreamsRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStreams not implemented")
}
func (UnimplementedNatsManagerServiceServer) DeleteObjectStores(context.Context, *DeleteObjectStoresRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjectStores not implemented")
}
func (UnimplementedNatsManagerServiceServer) CreateKeyValueStores(context.Context, *CreateKeyValueStoresRequest) (*CreateKeyValueStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyValueStores not implemented")
}
func (UnimplementedNatsManagerServiceServer) mustEmbedUnimplementedNatsManagerServiceServer() {}

// UnsafeNatsManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NatsManagerServiceServer will
// result in compilation errors.
type UnsafeNatsManagerServiceServer interface {
	mustEmbedUnimplementedNatsManagerServiceServer()
}

func RegisterNatsManagerServiceServer(s grpc.ServiceRegistrar, srv NatsManagerServiceServer) {
	s.RegisterService(&NatsManagerService_ServiceDesc, srv)
}

func _NatsManagerService_CreateStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsManagerServiceServer).CreateStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nats.NatsManagerService/CreateStreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsManagerServiceServer).CreateStreams(ctx, req.(*CreateStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatsManagerService_CreateObjectStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsManagerServiceServer).CreateObjectStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nats.NatsManagerService/CreateObjectStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsManagerServiceServer).CreateObjectStores(ctx, req.(*CreateObjectStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatsManagerService_DeleteStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsManagerServiceServer).DeleteStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nats.NatsManagerService/DeleteStreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsManagerServiceServer).DeleteStreams(ctx, req.(*DeleteStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatsManagerService_DeleteObjectStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsManagerServiceServer).DeleteObjectStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nats.NatsManagerService/DeleteObjectStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsManagerServiceServer).DeleteObjectStores(ctx, req.(*DeleteObjectStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatsManagerService_CreateKeyValueStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyValueStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatsManagerServiceServer).CreateKeyValueStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nats.NatsManagerService/CreateKeyValueStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatsManagerServiceServer).CreateKeyValueStores(ctx, req.(*CreateKeyValueStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NatsManagerService_ServiceDesc is the grpc.ServiceDesc for NatsManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NatsManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nats.NatsManagerService",
	HandlerType: (*NatsManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStreams",
			Handler:    _NatsManagerService_CreateStreams_Handler,
		},
		{
			MethodName: "CreateObjectStores",
			Handler:    _NatsManagerService_CreateObjectStores_Handler,
		},
		{
			MethodName: "DeleteStreams",
			Handler:    _NatsManagerService_DeleteStreams_Handler,
		},
		{
			MethodName: "DeleteObjectStores",
			Handler:    _NatsManagerService_DeleteObjectStores_Handler,
		},
		{
			MethodName: "CreateKeyValueStores",
			Handler:    _NatsManagerService_CreateKeyValueStores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nats.proto",
}
