scalar Upload

type Query {
  me: User
  users: [User!]!
  runtime: Runtime!
  version(name: String!): Version!
  versions: [Version!]!
  settings: Settings!
  userActivityList(
    userEmail: String
    types: [UserActivityType!]
    versionNames: [String!]
    fromDate: String
    toDate: String
    lastId: String
  ): [UserActivity!]!
  logs(
    versionName: String!
    filters: LogFilters!
    cursor: String
  ): LogPage!
  metrics(
    versionName: String!
    startDate: String!
    endDate: String!
  ): Metrics
}

type Mutation {
  createVersion(input: CreateVersionInput!): Version!
  startVersion(input: StartVersionInput!): Version!
  stopVersion(input: StopVersionInput!): Version!
  publishVersion(input: PublishVersionInput!): Version!
  unpublishVersion(input: UnpublishVersionInput!): Version!
  updateSettings(input: SettingsInput!): Settings!
  updateVersionConfiguration(input: UpdateConfigurationInput!): Version!
  removeUsers(input: UsersInput!): [User!]!
  updateAccessLevel(input: UpdateAccessLevelInput!): [User!]!
  revokeUserSessions(input: UsersInput!): [User!]!
  createUser(input: CreateUserInput!): User!
  deleteApiToken(input: DeleteApiTokenInput!): ApiToken!
  generateApiToken(input: GenerateApiTokenInput!): String!
}

type Subscription {
  watchNodeLogs(versionName: String!, filters: LogFilters!): NodeLog!
  watchNodeStatus(versionName: String!): Node!
  watchVersion: Version!
}

input CreateVersionInput {
  file: Upload!
}

input StartVersionInput {
  versionName : String!
  comment: String!
}

input StopVersionInput {
  versionName: String!
  comment: String!
}

input PublishVersionInput {
  versionName: String!
  comment: String!
}

input UnpublishVersionInput {
  versionName: String!
  comment: String!
}

input CreateUserInput {
  email: String!
  accessLevel: AccessLevel!
}

input GenerateApiTokenInput {
  name: String!
}

input DeleteApiTokenInput {
  id: ID!
}

input UsersInput {
  userIds: [ID!]!
  comment: String!
}

input UpdateAccessLevelInput {
  userIds: [ID!]!
  accessLevel: AccessLevel!
  comment: String!
}

input SettingsInput {
  authAllowedDomains: [String!]
  sessionLifetimeInDays: Int
}

type User {
  id: ID!
  email: String!
  accessLevel: AccessLevel!
  creationDate: String!
  lastActivity: String
  activeSessions: Int!
  apiTokens: [ApiToken!]!
}

enum AccessLevel {
  VIEWER
  MANAGER
  ADMIN
}

type ApiToken {
  id: ID!
  name: String!
  creationDate: String!
  lastActivity: String
}

type ConfigurationVariable {
  key: String!
  value: String!
  type: ConfigurationVariableType!
}

enum ConfigurationVariableType {
  VARIABLE
  FILE
}

input ConfigurationVariablesInput {
  key: String!
  value: String!
}

input UpdateConfigurationInput {
  versionName: String!
  configurationVariables: [ConfigurationVariablesInput!]!
}

type Runtime {
  id: ID!
  name: String!
  description: String!
  creationDate: String!
  measurementsUrl: String!
  databaseUrl: String!
  entrypointAddress: String!
}

type Edge {
  id: ID!
  fromNode: ID!
  toNode: ID!
}

type Node {
  id: ID!
  name: String!
  status: NodeStatus!
}

enum NodeStatus {
  STARTING
  STARTED
  STOPPED
  ERROR
}

type Workflow {
  id: ID!
  name: String!
  nodes: [Node!]!
  edges: [Edge!]!
}

type Version {
  id: ID!
  name: String!
  description: String!
  status: VersionStatus!
  creationDate: String!
  creationAuthor: User!
  publicationDate: String
  publicationAuthor: User
  workflows: [Workflow!]!
  config: VersionConfig!
  hasDoc: Boolean
  errors: [String!]!
}

type VersionConfig {
  vars: [ConfigurationVariable!]!
  completed: Boolean!
}

enum VersionStatus {
  CREATING
  CREATED
  STARTING
  STARTED
  PUBLISHED
  STOPPING
  STOPPED
  ERROR
}

type Settings {
  authAllowedDomains: [String!]!
  sessionLifetimeInDays: Int!
}

type UserActivityVar {
  key: String!
  value: String!
}

type UserActivity {
  id: ID!
  type: UserActivityType!
  user: User!
  date: String!
  vars: [UserActivityVar!]!
}

enum UserActivityType {
  LOGIN
  LOGOUT
  CREATE_VERSION
  PUBLISH_VERSION
  UNPUBLISH_VERSION
  START_VERSION
  STOP_VERSION
  UPDATE_SETTING
  UPDATE_VERSION_CONFIGURATION
  CREATE_USER
  REMOVE_USERS
  UPDATE_ACCESS_LEVELS
  REVOKE_SESSIONS
  GENERATE_API_TOKEN
  DELETE_API_TOKEN
}

input LogFilters {
  startDate: String!
  endDate: String
  search: String
  levels: [LogLevel!]
  nodeIds: [ID!]
}

enum LogLevel {
  ERROR
  WARN
  INFO
  DEBUG
}

type NodeLog {
  id: ID!
  date: String!
  nodeId: String
  nodeName: String
  workflowId: String
  workflowName: String
  message: String!
  level: LogLevel!
}

type LogPage {
  cursor: String
  items: [NodeLog!]!
}

type Metrics {
  values: MetricsValues!
  charts: MetricsCharts!
}

type MetricsValues {
  accuracy: MetricsAccuracy!
  missing: Int!
  newLabels: Int!
}

type MetricsAccuracy {
  total: Int!
  micro: Int!
  macro: Int!
  weighted: Int!
}

type MetricsCharts {
  confusionMatrix: [MetricChartData!]!
  seriesAccuracy: [MetricChartData!]!
  seriesRecall: [MetricChartData!]!
  seriesSupport: [MetricChartData!]!
  successVsFails: [MetricChartData!]!
}

type MetricChartData {
  x: String!
  y: String!
  z: String!
}
