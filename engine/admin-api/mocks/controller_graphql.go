// Code generated by MockGen. DO NOT EDIT.
// Source: graphql.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
)

// MockGraphQL is a mock of GraphQL interface.
type MockGraphQL struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQLMockRecorder
}

// MockGraphQLMockRecorder is the mock recorder for MockGraphQL.
type MockGraphQLMockRecorder struct {
	mock *MockGraphQL
}

// NewMockGraphQL creates a new mock instance.
func NewMockGraphQL(ctrl *gomock.Controller) *MockGraphQL {
	mock := &MockGraphQL{ctrl: ctrl}
	mock.recorder = &MockGraphQLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQL) EXPECT() *MockGraphQLMockRecorder {
	return m.recorder
}

// GraphQLHandler mocks base method.
func (m *MockGraphQL) GraphQLHandler(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphQLHandler", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GraphQLHandler indicates an expected call of GraphQLHandler.
func (mr *MockGraphQLMockRecorder) GraphQLHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphQLHandler", reflect.TypeOf((*MockGraphQL)(nil).GraphQLHandler), c)
}

// PlaygroundHandler mocks base method.
func (m *MockGraphQL) PlaygroundHandler(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaygroundHandler", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// PlaygroundHandler indicates an expected call of PlaygroundHandler.
func (mr *MockGraphQLMockRecorder) PlaygroundHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaygroundHandler", reflect.TypeOf((*MockGraphQL)(nil).PlaygroundHandler), c)
}
