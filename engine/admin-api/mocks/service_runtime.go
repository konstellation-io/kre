// Code generated by MockGen. DO NOT EDIT.
// Source: runtime.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kre/engine/admin-api/domain/entity"
)

// MockRuntimeService is a mock of RuntimeService interface.
type MockRuntimeService struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeServiceMockRecorder
}

// MockRuntimeServiceMockRecorder is the mock recorder for MockRuntimeService.
type MockRuntimeServiceMockRecorder struct {
	mock *MockRuntimeService
}

// NewMockRuntimeService creates a new mock instance.
func NewMockRuntimeService(ctrl *gomock.Controller) *MockRuntimeService {
	mock := &MockRuntimeService{ctrl: ctrl}
	mock.recorder = &MockRuntimeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntimeService) EXPECT() *MockRuntimeServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRuntimeService) Create(ctx context.Context, runtime *entity.Runtime) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, runtime)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRuntimeServiceMockRecorder) Create(ctx, runtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRuntimeService)(nil).Create), ctx, runtime)
}
