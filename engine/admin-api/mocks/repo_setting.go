// Code generated by MockGen. DO NOT EDIT.
// Source: setting.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kre/engine/admin-api/domain/entity"
)

// MockSettingRepo is a mock of SettingRepo interface.
type MockSettingRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSettingRepoMockRecorder
}

// MockSettingRepoMockRecorder is the mock recorder for MockSettingRepo.
type MockSettingRepoMockRecorder struct {
	mock *MockSettingRepo
}

// NewMockSettingRepo creates a new mock instance.
func NewMockSettingRepo(ctrl *gomock.Controller) *MockSettingRepo {
	mock := &MockSettingRepo{ctrl: ctrl}
	mock.recorder = &MockSettingRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingRepo) EXPECT() *MockSettingRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSettingRepo) Create(arg0 entity.Settings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSettingRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSettingRepo)(nil).Create), arg0)
}

// Get mocks base method.
func (m *MockSettingRepo) Get(ctx context.Context) (*entity.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(*entity.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSettingRepoMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSettingRepo)(nil).Get), ctx)
}

// Update mocks base method.
func (m *MockSettingRepo) Update(setting *entity.Settings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", setting)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSettingRepoMockRecorder) Update(setting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSettingRepo)(nil).Update), setting)
}
