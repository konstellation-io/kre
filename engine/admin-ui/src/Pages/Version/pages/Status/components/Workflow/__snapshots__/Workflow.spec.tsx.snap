// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Workflow matches snapshot 1`] = `
<Wrapper>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <MockedProvider
        addTypename={false}
        mocks={Array []}
      >
        <ApolloProvider
          client={
            ApolloClient {
              "cache": InMemoryCache {
                "addTypename": false,
                "config": Object {
                  "addTypename": false,
                  "canonizeResults": false,
                  "dataIdFromObject": [Function],
                  "resultCaching": true,
                },
                "data": Root {
                  "canRead": [Function],
                  "data": Object {},
                  "getFieldValue": [Function],
                  "group": CacheGroup {
                    "caching": true,
                    "d": [Function],
                    "keyMaker": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "parent": null,
                  },
                  "policies": Policies {
                    "cache": [Circular],
                    "config": Object {
                      "cache": [Circular],
                      "dataIdFromObject": [Function],
                      "possibleTypes": undefined,
                      "typePolicies": undefined,
                    },
                    "fuzzySubtypes": Map {},
                    "rootIdsByTypename": Object {
                      "Mutation": "ROOT_MUTATION",
                      "Query": "ROOT_QUERY",
                      "Subscription": "ROOT_SUBSCRIPTION",
                    },
                    "rootTypenamesById": Object {
                      "ROOT_MUTATION": "Mutation",
                      "ROOT_QUERY": "Query",
                      "ROOT_SUBSCRIPTION": "Subscription",
                    },
                    "supertypeMap": Map {},
                    "toBeAdded": Object {},
                    "typePolicies": Object {},
                    "usingPossibleTypes": false,
                  },
                  "refs": Object {},
                  "rootIds": Object {},
                  "storageTrie": Trie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "stump": Stump {
                    "canRead": [Function],
                    "data": Object {},
                    "getFieldValue": [Function],
                    "group": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "parent": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "parent": null,
                      },
                    },
                    "id": "EntityStore.Stump",
                    "parent": [Circular],
                    "policies": Policies {
                      "cache": [Circular],
                      "config": Object {
                        "cache": [Circular],
                        "dataIdFromObject": [Function],
                        "possibleTypes": undefined,
                        "typePolicies": undefined,
                      },
                      "fuzzySubtypes": Map {},
                      "rootIdsByTypename": Object {
                        "Mutation": "ROOT_MUTATION",
                        "Query": "ROOT_QUERY",
                        "Subscription": "ROOT_SUBSCRIPTION",
                      },
                      "rootTypenamesById": Object {
                        "ROOT_MUTATION": "Mutation",
                        "ROOT_QUERY": "Query",
                        "ROOT_SUBSCRIPTION": "Subscription",
                      },
                      "supertypeMap": Map {},
                      "toBeAdded": Object {},
                      "typePolicies": Object {},
                      "usingPossibleTypes": false,
                    },
                    "refs": Object {},
                    "replay": [Function],
                    "rootIds": Object {},
                    "toReference": [Function],
                  },
                  "toReference": [Function],
                },
                "getFragmentDoc": [Function],
                "makeVar": [Function],
                "maybeBroadcastWatch": [Function],
                "optimisticData": Stump {
                  "canRead": [Function],
                  "data": Object {},
                  "getFieldValue": [Function],
                  "group": CacheGroup {
                    "caching": true,
                    "d": [Function],
                    "keyMaker": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "parent": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "parent": null,
                    },
                  },
                  "id": "EntityStore.Stump",
                  "parent": Root {
                    "canRead": [Function],
                    "data": Object {},
                    "getFieldValue": [Function],
                    "group": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "parent": null,
                    },
                    "policies": Policies {
                      "cache": [Circular],
                      "config": Object {
                        "cache": [Circular],
                        "dataIdFromObject": [Function],
                        "possibleTypes": undefined,
                        "typePolicies": undefined,
                      },
                      "fuzzySubtypes": Map {},
                      "rootIdsByTypename": Object {
                        "Mutation": "ROOT_MUTATION",
                        "Query": "ROOT_QUERY",
                        "Subscription": "ROOT_SUBSCRIPTION",
                      },
                      "rootTypenamesById": Object {
                        "ROOT_MUTATION": "Mutation",
                        "ROOT_QUERY": "Query",
                        "ROOT_SUBSCRIPTION": "Subscription",
                      },
                      "supertypeMap": Map {},
                      "toBeAdded": Object {},
                      "typePolicies": Object {},
                      "usingPossibleTypes": false,
                    },
                    "refs": Object {},
                    "rootIds": Object {},
                    "storageTrie": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "stump": [Circular],
                    "toReference": [Function],
                  },
                  "policies": Policies {
                    "cache": [Circular],
                    "config": Object {
                      "cache": [Circular],
                      "dataIdFromObject": [Function],
                      "possibleTypes": undefined,
                      "typePolicies": undefined,
                    },
                    "fuzzySubtypes": Map {},
                    "rootIdsByTypename": Object {
                      "Mutation": "ROOT_MUTATION",
                      "Query": "ROOT_QUERY",
                      "Subscription": "ROOT_SUBSCRIPTION",
                    },
                    "rootTypenamesById": Object {
                      "ROOT_MUTATION": "Mutation",
                      "ROOT_QUERY": "Query",
                      "ROOT_SUBSCRIPTION": "Subscription",
                    },
                    "supertypeMap": Map {},
                    "toBeAdded": Object {},
                    "typePolicies": Object {},
                    "usingPossibleTypes": false,
                  },
                  "refs": Object {},
                  "replay": [Function],
                  "rootIds": Object {},
                  "toReference": [Function],
                },
                "policies": Policies {
                  "cache": [Circular],
                  "config": Object {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": undefined,
                  },
                  "fuzzySubtypes": Map {},
                  "rootIdsByTypename": Object {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": Object {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "supertypeMap": Map {},
                  "toBeAdded": Object {},
                  "typePolicies": Object {},
                  "usingPossibleTypes": false,
                },
                "storeReader": StoreReader {
                  "canon": ObjectCanon {
                    "empty": Object {},
                    "keysByJSON": Map {
                      "[]" => Object {
                        "json": "[]",
                        "sorted": Array [],
                      },
                    },
                    "known": WeakSet {},
                    "passes": WeakMap {},
                    "pool": Trie {
                      "data": Object {
                        "keys": Object {
                          "json": "[]",
                          "sorted": Array [],
                        },
                      },
                      "makeData": [Function],
                      "weak": WeakMap {},
                      "weakness": true,
                    },
                  },
                  "config": Object {
                    "addTypename": false,
                    "cache": [Circular],
                    "canonizeResults": false,
                  },
                  "executeSelectionSet": [Function],
                  "executeSubSelectedArray": [Function],
                  "knownResults": WeakMap {},
                },
                "storeWriter": StoreWriter {
                  "cache": [Circular],
                  "reader": StoreReader {
                    "canon": ObjectCanon {
                      "empty": Object {},
                      "keysByJSON": Map {
                        "[]" => Object {
                          "json": "[]",
                          "sorted": Array [],
                        },
                      },
                      "known": WeakSet {},
                      "passes": WeakMap {},
                      "pool": Trie {
                        "data": Object {
                          "keys": Object {
                            "json": "[]",
                            "sorted": Array [],
                          },
                        },
                        "makeData": [Function],
                        "weak": WeakMap {},
                        "weakness": true,
                      },
                    },
                    "config": Object {
                      "addTypename": false,
                      "cache": [Circular],
                      "canonizeResults": false,
                    },
                    "executeSelectionSet": [Function],
                    "executeSubSelectedArray": [Function],
                    "knownResults": WeakMap {},
                  },
                },
                "txCount": 0,
                "typenameDocumentCache": Map {},
                "watches": Set {},
              },
              "clearStoreCallbacks": Array [],
              "defaultOptions": Object {},
              "disableNetworkFetches": false,
              "link": MockLink {
                "addTypename": false,
                "mockedResponsesByKey": Object {},
              },
              "localState": LocalState {
                "cache": InMemoryCache {
                  "addTypename": false,
                  "config": Object {
                    "addTypename": false,
                    "canonizeResults": false,
                    "dataIdFromObject": [Function],
                    "resultCaching": true,
                  },
                  "data": Root {
                    "canRead": [Function],
                    "data": Object {},
                    "getFieldValue": [Function],
                    "group": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "parent": null,
                    },
                    "policies": Policies {
                      "cache": [Circular],
                      "config": Object {
                        "cache": [Circular],
                        "dataIdFromObject": [Function],
                        "possibleTypes": undefined,
                        "typePolicies": undefined,
                      },
                      "fuzzySubtypes": Map {},
                      "rootIdsByTypename": Object {
                        "Mutation": "ROOT_MUTATION",
                        "Query": "ROOT_QUERY",
                        "Subscription": "ROOT_SUBSCRIPTION",
                      },
                      "rootTypenamesById": Object {
                        "ROOT_MUTATION": "Mutation",
                        "ROOT_QUERY": "Query",
                        "ROOT_SUBSCRIPTION": "Subscription",
                      },
                      "supertypeMap": Map {},
                      "toBeAdded": Object {},
                      "typePolicies": Object {},
                      "usingPossibleTypes": false,
                    },
                    "refs": Object {},
                    "rootIds": Object {},
                    "storageTrie": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "stump": Stump {
                      "canRead": [Function],
                      "data": Object {},
                      "getFieldValue": [Function],
                      "group": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "parent": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": Trie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "parent": null,
                        },
                      },
                      "id": "EntityStore.Stump",
                      "parent": [Circular],
                      "policies": Policies {
                        "cache": [Circular],
                        "config": Object {
                          "cache": [Circular],
                          "dataIdFromObject": [Function],
                          "possibleTypes": undefined,
                          "typePolicies": undefined,
                        },
                        "fuzzySubtypes": Map {},
                        "rootIdsByTypename": Object {
                          "Mutation": "ROOT_MUTATION",
                          "Query": "ROOT_QUERY",
                          "Subscription": "ROOT_SUBSCRIPTION",
                        },
                        "rootTypenamesById": Object {
                          "ROOT_MUTATION": "Mutation",
                          "ROOT_QUERY": "Query",
                          "ROOT_SUBSCRIPTION": "Subscription",
                        },
                        "supertypeMap": Map {},
                        "toBeAdded": Object {},
                        "typePolicies": Object {},
                        "usingPossibleTypes": false,
                      },
                      "refs": Object {},
                      "replay": [Function],
                      "rootIds": Object {},
                      "toReference": [Function],
                    },
                    "toReference": [Function],
                  },
                  "getFragmentDoc": [Function],
                  "makeVar": [Function],
                  "maybeBroadcastWatch": [Function],
                  "optimisticData": Stump {
                    "canRead": [Function],
                    "data": Object {},
                    "getFieldValue": [Function],
                    "group": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "parent": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "parent": null,
                      },
                    },
                    "id": "EntityStore.Stump",
                    "parent": Root {
                      "canRead": [Function],
                      "data": Object {},
                      "getFieldValue": [Function],
                      "group": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "parent": null,
                      },
                      "policies": Policies {
                        "cache": [Circular],
                        "config": Object {
                          "cache": [Circular],
                          "dataIdFromObject": [Function],
                          "possibleTypes": undefined,
                          "typePolicies": undefined,
                        },
                        "fuzzySubtypes": Map {},
                        "rootIdsByTypename": Object {
                          "Mutation": "ROOT_MUTATION",
                          "Query": "ROOT_QUERY",
                          "Subscription": "ROOT_SUBSCRIPTION",
                        },
                        "rootTypenamesById": Object {
                          "ROOT_MUTATION": "Mutation",
                          "ROOT_QUERY": "Query",
                          "ROOT_SUBSCRIPTION": "Subscription",
                        },
                        "supertypeMap": Map {},
                        "toBeAdded": Object {},
                        "typePolicies": Object {},
                        "usingPossibleTypes": false,
                      },
                      "refs": Object {},
                      "rootIds": Object {},
                      "storageTrie": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "stump": [Circular],
                      "toReference": [Function],
                    },
                    "policies": Policies {
                      "cache": [Circular],
                      "config": Object {
                        "cache": [Circular],
                        "dataIdFromObject": [Function],
                        "possibleTypes": undefined,
                        "typePolicies": undefined,
                      },
                      "fuzzySubtypes": Map {},
                      "rootIdsByTypename": Object {
                        "Mutation": "ROOT_MUTATION",
                        "Query": "ROOT_QUERY",
                        "Subscription": "ROOT_SUBSCRIPTION",
                      },
                      "rootTypenamesById": Object {
                        "ROOT_MUTATION": "Mutation",
                        "ROOT_QUERY": "Query",
                        "ROOT_SUBSCRIPTION": "Subscription",
                      },
                      "supertypeMap": Map {},
                      "toBeAdded": Object {},
                      "typePolicies": Object {},
                      "usingPossibleTypes": false,
                    },
                    "refs": Object {},
                    "replay": [Function],
                    "rootIds": Object {},
                    "toReference": [Function],
                  },
                  "policies": Policies {
                    "cache": [Circular],
                    "config": Object {
                      "cache": [Circular],
                      "dataIdFromObject": [Function],
                      "possibleTypes": undefined,
                      "typePolicies": undefined,
                    },
                    "fuzzySubtypes": Map {},
                    "rootIdsByTypename": Object {
                      "Mutation": "ROOT_MUTATION",
                      "Query": "ROOT_QUERY",
                      "Subscription": "ROOT_SUBSCRIPTION",
                    },
                    "rootTypenamesById": Object {
                      "ROOT_MUTATION": "Mutation",
                      "ROOT_QUERY": "Query",
                      "ROOT_SUBSCRIPTION": "Subscription",
                    },
                    "supertypeMap": Map {},
                    "toBeAdded": Object {},
                    "typePolicies": Object {},
                    "usingPossibleTypes": false,
                  },
                  "storeReader": StoreReader {
                    "canon": ObjectCanon {
                      "empty": Object {},
                      "keysByJSON": Map {
                        "[]" => Object {
                          "json": "[]",
                          "sorted": Array [],
                        },
                      },
                      "known": WeakSet {},
                      "passes": WeakMap {},
                      "pool": Trie {
                        "data": Object {
                          "keys": Object {
                            "json": "[]",
                            "sorted": Array [],
                          },
                        },
                        "makeData": [Function],
                        "weak": WeakMap {},
                        "weakness": true,
                      },
                    },
                    "config": Object {
                      "addTypename": false,
                      "cache": [Circular],
                      "canonizeResults": false,
                    },
                    "executeSelectionSet": [Function],
                    "executeSubSelectedArray": [Function],
                    "knownResults": WeakMap {},
                  },
                  "storeWriter": StoreWriter {
                    "cache": [Circular],
                    "reader": StoreReader {
                      "canon": ObjectCanon {
                        "empty": Object {},
                        "keysByJSON": Map {
                          "[]" => Object {
                            "json": "[]",
                            "sorted": Array [],
                          },
                        },
                        "known": WeakSet {},
                        "passes": WeakMap {},
                        "pool": Trie {
                          "data": Object {
                            "keys": Object {
                              "json": "[]",
                              "sorted": Array [],
                            },
                          },
                          "makeData": [Function],
                          "weak": WeakMap {},
                          "weakness": true,
                        },
                      },
                      "config": Object {
                        "addTypename": false,
                        "cache": [Circular],
                        "canonizeResults": false,
                      },
                      "executeSelectionSet": [Function],
                      "executeSubSelectedArray": [Function],
                      "knownResults": WeakMap {},
                    },
                  },
                  "txCount": 0,
                  "typenameDocumentCache": Map {},
                  "watches": Set {},
                },
                "client": [Circular],
              },
              "mutate": [Function],
              "query": [Function],
              "queryDeduplication": true,
              "queryManager": QueryManager {
                "assumeImmutableResults": false,
                "cache": InMemoryCache {
                  "addTypename": false,
                  "config": Object {
                    "addTypename": false,
                    "canonizeResults": false,
                    "dataIdFromObject": [Function],
                    "resultCaching": true,
                  },
                  "data": Root {
                    "canRead": [Function],
                    "data": Object {},
                    "getFieldValue": [Function],
                    "group": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "parent": null,
                    },
                    "policies": Policies {
                      "cache": [Circular],
                      "config": Object {
                        "cache": [Circular],
                        "dataIdFromObject": [Function],
                        "possibleTypes": undefined,
                        "typePolicies": undefined,
                      },
                      "fuzzySubtypes": Map {},
                      "rootIdsByTypename": Object {
                        "Mutation": "ROOT_MUTATION",
                        "Query": "ROOT_QUERY",
                        "Subscription": "ROOT_SUBSCRIPTION",
                      },
                      "rootTypenamesById": Object {
                        "ROOT_MUTATION": "Mutation",
                        "ROOT_QUERY": "Query",
                        "ROOT_SUBSCRIPTION": "Subscription",
                      },
                      "supertypeMap": Map {},
                      "toBeAdded": Object {},
                      "typePolicies": Object {},
                      "usingPossibleTypes": false,
                    },
                    "refs": Object {},
                    "rootIds": Object {},
                    "storageTrie": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "stump": Stump {
                      "canRead": [Function],
                      "data": Object {},
                      "getFieldValue": [Function],
                      "group": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "parent": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": Trie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "parent": null,
                        },
                      },
                      "id": "EntityStore.Stump",
                      "parent": [Circular],
                      "policies": Policies {
                        "cache": [Circular],
                        "config": Object {
                          "cache": [Circular],
                          "dataIdFromObject": [Function],
                          "possibleTypes": undefined,
                          "typePolicies": undefined,
                        },
                        "fuzzySubtypes": Map {},
                        "rootIdsByTypename": Object {
                          "Mutation": "ROOT_MUTATION",
                          "Query": "ROOT_QUERY",
                          "Subscription": "ROOT_SUBSCRIPTION",
                        },
                        "rootTypenamesById": Object {
                          "ROOT_MUTATION": "Mutation",
                          "ROOT_QUERY": "Query",
                          "ROOT_SUBSCRIPTION": "Subscription",
                        },
                        "supertypeMap": Map {},
                        "toBeAdded": Object {},
                        "typePolicies": Object {},
                        "usingPossibleTypes": false,
                      },
                      "refs": Object {},
                      "replay": [Function],
                      "rootIds": Object {},
                      "toReference": [Function],
                    },
                    "toReference": [Function],
                  },
                  "getFragmentDoc": [Function],
                  "makeVar": [Function],
                  "maybeBroadcastWatch": [Function],
                  "optimisticData": Stump {
                    "canRead": [Function],
                    "data": Object {},
                    "getFieldValue": [Function],
                    "group": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "parent": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "parent": null,
                      },
                    },
                    "id": "EntityStore.Stump",
                    "parent": Root {
                      "canRead": [Function],
                      "data": Object {},
                      "getFieldValue": [Function],
                      "group": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "parent": null,
                      },
                      "policies": Policies {
                        "cache": [Circular],
                        "config": Object {
                          "cache": [Circular],
                          "dataIdFromObject": [Function],
                          "possibleTypes": undefined,
                          "typePolicies": undefined,
                        },
                        "fuzzySubtypes": Map {},
                        "rootIdsByTypename": Object {
                          "Mutation": "ROOT_MUTATION",
                          "Query": "ROOT_QUERY",
                          "Subscription": "ROOT_SUBSCRIPTION",
                        },
                        "rootTypenamesById": Object {
                          "ROOT_MUTATION": "Mutation",
                          "ROOT_QUERY": "Query",
                          "ROOT_SUBSCRIPTION": "Subscription",
                        },
                        "supertypeMap": Map {},
                        "toBeAdded": Object {},
                        "typePolicies": Object {},
                        "usingPossibleTypes": false,
                      },
                      "refs": Object {},
                      "rootIds": Object {},
                      "storageTrie": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "stump": [Circular],
                      "toReference": [Function],
                    },
                    "policies": Policies {
                      "cache": [Circular],
                      "config": Object {
                        "cache": [Circular],
                        "dataIdFromObject": [Function],
                        "possibleTypes": undefined,
                        "typePolicies": undefined,
                      },
                      "fuzzySubtypes": Map {},
                      "rootIdsByTypename": Object {
                        "Mutation": "ROOT_MUTATION",
                        "Query": "ROOT_QUERY",
                        "Subscription": "ROOT_SUBSCRIPTION",
                      },
                      "rootTypenamesById": Object {
                        "ROOT_MUTATION": "Mutation",
                        "ROOT_QUERY": "Query",
                        "ROOT_SUBSCRIPTION": "Subscription",
                      },
                      "supertypeMap": Map {},
                      "toBeAdded": Object {},
                      "typePolicies": Object {},
                      "usingPossibleTypes": false,
                    },
                    "refs": Object {},
                    "replay": [Function],
                    "rootIds": Object {},
                    "toReference": [Function],
                  },
                  "policies": Policies {
                    "cache": [Circular],
                    "config": Object {
                      "cache": [Circular],
                      "dataIdFromObject": [Function],
                      "possibleTypes": undefined,
                      "typePolicies": undefined,
                    },
                    "fuzzySubtypes": Map {},
                    "rootIdsByTypename": Object {
                      "Mutation": "ROOT_MUTATION",
                      "Query": "ROOT_QUERY",
                      "Subscription": "ROOT_SUBSCRIPTION",
                    },
                    "rootTypenamesById": Object {
                      "ROOT_MUTATION": "Mutation",
                      "ROOT_QUERY": "Query",
                      "ROOT_SUBSCRIPTION": "Subscription",
                    },
                    "supertypeMap": Map {},
                    "toBeAdded": Object {},
                    "typePolicies": Object {},
                    "usingPossibleTypes": false,
                  },
                  "storeReader": StoreReader {
                    "canon": ObjectCanon {
                      "empty": Object {},
                      "keysByJSON": Map {
                        "[]" => Object {
                          "json": "[]",
                          "sorted": Array [],
                        },
                      },
                      "known": WeakSet {},
                      "passes": WeakMap {},
                      "pool": Trie {
                        "data": Object {
                          "keys": Object {
                            "json": "[]",
                            "sorted": Array [],
                          },
                        },
                        "makeData": [Function],
                        "weak": WeakMap {},
                        "weakness": true,
                      },
                    },
                    "config": Object {
                      "addTypename": false,
                      "cache": [Circular],
                      "canonizeResults": false,
                    },
                    "executeSelectionSet": [Function],
                    "executeSubSelectedArray": [Function],
                    "knownResults": WeakMap {},
                  },
                  "storeWriter": StoreWriter {
                    "cache": [Circular],
                    "reader": StoreReader {
                      "canon": ObjectCanon {
                        "empty": Object {},
                        "keysByJSON": Map {
                          "[]" => Object {
                            "json": "[]",
                            "sorted": Array [],
                          },
                        },
                        "known": WeakSet {},
                        "passes": WeakMap {},
                        "pool": Trie {
                          "data": Object {
                            "keys": Object {
                              "json": "[]",
                              "sorted": Array [],
                            },
                          },
                          "makeData": [Function],
                          "weak": WeakMap {},
                          "weakness": true,
                        },
                      },
                      "config": Object {
                        "addTypename": false,
                        "cache": [Circular],
                        "canonizeResults": false,
                      },
                      "executeSelectionSet": [Function],
                      "executeSubSelectedArray": [Function],
                      "knownResults": WeakMap {},
                    },
                  },
                  "txCount": 0,
                  "typenameDocumentCache": Map {},
                  "watches": Set {},
                },
                "clientAwareness": Object {
                  "name": undefined,
                  "version": undefined,
                },
                "fetchCancelFns": Map {},
                "inFlightLinkObservables": Map {},
                "link": MockLink {
                  "addTypename": false,
                  "mockedResponsesByKey": Object {},
                },
                "localState": LocalState {
                  "cache": InMemoryCache {
                    "addTypename": false,
                    "config": Object {
                      "addTypename": false,
                      "canonizeResults": false,
                      "dataIdFromObject": [Function],
                      "resultCaching": true,
                    },
                    "data": Root {
                      "canRead": [Function],
                      "data": Object {},
                      "getFieldValue": [Function],
                      "group": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "parent": null,
                      },
                      "policies": Policies {
                        "cache": [Circular],
                        "config": Object {
                          "cache": [Circular],
                          "dataIdFromObject": [Function],
                          "possibleTypes": undefined,
                          "typePolicies": undefined,
                        },
                        "fuzzySubtypes": Map {},
                        "rootIdsByTypename": Object {
                          "Mutation": "ROOT_MUTATION",
                          "Query": "ROOT_QUERY",
                          "Subscription": "ROOT_SUBSCRIPTION",
                        },
                        "rootTypenamesById": Object {
                          "ROOT_MUTATION": "Mutation",
                          "ROOT_QUERY": "Query",
                          "ROOT_SUBSCRIPTION": "Subscription",
                        },
                        "supertypeMap": Map {},
                        "toBeAdded": Object {},
                        "typePolicies": Object {},
                        "usingPossibleTypes": false,
                      },
                      "refs": Object {},
                      "rootIds": Object {},
                      "storageTrie": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "stump": Stump {
                        "canRead": [Function],
                        "data": Object {},
                        "getFieldValue": [Function],
                        "group": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": Trie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "parent": CacheGroup {
                            "caching": true,
                            "d": [Function],
                            "keyMaker": Trie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                            "parent": null,
                          },
                        },
                        "id": "EntityStore.Stump",
                        "parent": [Circular],
                        "policies": Policies {
                          "cache": [Circular],
                          "config": Object {
                            "cache": [Circular],
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": undefined,
                          },
                          "fuzzySubtypes": Map {},
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "supertypeMap": Map {},
                          "toBeAdded": Object {},
                          "typePolicies": Object {},
                          "usingPossibleTypes": false,
                        },
                        "refs": Object {},
                        "replay": [Function],
                        "rootIds": Object {},
                        "toReference": [Function],
                      },
                      "toReference": [Function],
                    },
                    "getFragmentDoc": [Function],
                    "makeVar": [Function],
                    "maybeBroadcastWatch": [Function],
                    "optimisticData": Stump {
                      "canRead": [Function],
                      "data": Object {},
                      "getFieldValue": [Function],
                      "group": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "parent": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": Trie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "parent": null,
                        },
                      },
                      "id": "EntityStore.Stump",
                      "parent": Root {
                        "canRead": [Function],
                        "data": Object {},
                        "getFieldValue": [Function],
                        "group": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": Trie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "parent": null,
                        },
                        "policies": Policies {
                          "cache": [Circular],
                          "config": Object {
                            "cache": [Circular],
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": undefined,
                          },
                          "fuzzySubtypes": Map {},
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "supertypeMap": Map {},
                          "toBeAdded": Object {},
                          "typePolicies": Object {},
                          "usingPossibleTypes": false,
                        },
                        "refs": Object {},
                        "rootIds": Object {},
                        "storageTrie": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "stump": [Circular],
                        "toReference": [Function],
                      },
                      "policies": Policies {
                        "cache": [Circular],
                        "config": Object {
                          "cache": [Circular],
                          "dataIdFromObject": [Function],
                          "possibleTypes": undefined,
                          "typePolicies": undefined,
                        },
                        "fuzzySubtypes": Map {},
                        "rootIdsByTypename": Object {
                          "Mutation": "ROOT_MUTATION",
                          "Query": "ROOT_QUERY",
                          "Subscription": "ROOT_SUBSCRIPTION",
                        },
                        "rootTypenamesById": Object {
                          "ROOT_MUTATION": "Mutation",
                          "ROOT_QUERY": "Query",
                          "ROOT_SUBSCRIPTION": "Subscription",
                        },
                        "supertypeMap": Map {},
                        "toBeAdded": Object {},
                        "typePolicies": Object {},
                        "usingPossibleTypes": false,
                      },
                      "refs": Object {},
                      "replay": [Function],
                      "rootIds": Object {},
                      "toReference": [Function],
                    },
                    "policies": Policies {
                      "cache": [Circular],
                      "config": Object {
                        "cache": [Circular],
                        "dataIdFromObject": [Function],
                        "possibleTypes": undefined,
                        "typePolicies": undefined,
                      },
                      "fuzzySubtypes": Map {},
                      "rootIdsByTypename": Object {
                        "Mutation": "ROOT_MUTATION",
                        "Query": "ROOT_QUERY",
                        "Subscription": "ROOT_SUBSCRIPTION",
                      },
                      "rootTypenamesById": Object {
                        "ROOT_MUTATION": "Mutation",
                        "ROOT_QUERY": "Query",
                        "ROOT_SUBSCRIPTION": "Subscription",
                      },
                      "supertypeMap": Map {},
                      "toBeAdded": Object {},
                      "typePolicies": Object {},
                      "usingPossibleTypes": false,
                    },
                    "storeReader": StoreReader {
                      "canon": ObjectCanon {
                        "empty": Object {},
                        "keysByJSON": Map {
                          "[]" => Object {
                            "json": "[]",
                            "sorted": Array [],
                          },
                        },
                        "known": WeakSet {},
                        "passes": WeakMap {},
                        "pool": Trie {
                          "data": Object {
                            "keys": Object {
                              "json": "[]",
                              "sorted": Array [],
                            },
                          },
                          "makeData": [Function],
                          "weak": WeakMap {},
                          "weakness": true,
                        },
                      },
                      "config": Object {
                        "addTypename": false,
                        "cache": [Circular],
                        "canonizeResults": false,
                      },
                      "executeSelectionSet": [Function],
                      "executeSubSelectedArray": [Function],
                      "knownResults": WeakMap {},
                    },
                    "storeWriter": StoreWriter {
                      "cache": [Circular],
                      "reader": StoreReader {
                        "canon": ObjectCanon {
                          "empty": Object {},
                          "keysByJSON": Map {
                            "[]" => Object {
                              "json": "[]",
                              "sorted": Array [],
                            },
                          },
                          "known": WeakSet {},
                          "passes": WeakMap {},
                          "pool": Trie {
                            "data": Object {
                              "keys": Object {
                                "json": "[]",
                                "sorted": Array [],
                              },
                            },
                            "makeData": [Function],
                            "weak": WeakMap {},
                            "weakness": true,
                          },
                        },
                        "config": Object {
                          "addTypename": false,
                          "cache": [Circular],
                          "canonizeResults": false,
                        },
                        "executeSelectionSet": [Function],
                        "executeSubSelectedArray": [Function],
                        "knownResults": WeakMap {},
                      },
                    },
                    "txCount": 0,
                    "typenameDocumentCache": Map {},
                    "watches": Set {},
                  },
                  "client": [Circular],
                },
                "mutationIdCounter": 1,
                "mutationStore": Object {},
                "onBroadcast": [Function],
                "queries": Map {},
                "queryDeduplication": true,
                "queryIdCounter": 1,
                "requestIdCounter": 1,
                "ssrMode": false,
                "transformCache": WeakMap {},
              },
              "reFetchObservableQueries": [Function],
              "resetStore": [Function],
              "resetStoreCallbacks": Array [],
              "typeDefs": undefined,
              "version": "3.5.6",
              "watchQuery": [Function],
            }
          }
        >
          <Workflow
            entrypointAddress="some-address"
            entrypointStatus="STARTED"
            tooltipRefs={null}
            workflow={
              Object {
                "__typename": "Workflow",
                "edges": Array [
                  Object {
                    "__typename": "Edge",
                    "fromNode": "node1",
                    "id": "edgeId",
                    "toNode": "node2",
                  },
                ],
                "id": "workflowId",
                "name": "Workflow Nane",
                "nodes": Array [
                  Object {
                    "__typename": "Node",
                    "id": "nodeId",
                    "name": "Node Name",
                    "status": "STARTED",
                  },
                ],
              }
            }
            workflowStatus="STARTED"
          >
            <div
              className="workflowContainer DOWN"
              style={
                Object {
                  "width": 483,
                }
              }
            >
              <WorkflowHeader
                name="Workflow Nane"
                onWorkflowClick={[Function]}
              >
                <div
                  className="workflowHeader"
                >
                  <div>
                    <div
                      className="titleName"
                    >
                      Workflow
                    </div>
                    <div
                      className="title"
                    >
                      Workflow Nane
                    </div>
                  </div>
                  <Can
                    perform="logs:view"
                  >
                    <div
                      className="button"
                      data-testid="openWorkflowLogs"
                      onClick={[Function]}
                      title="Open logs for this workflow"
                    >
                      <WithStyles(ForwardRef(SvgIcon))
                        className="icon-small"
                      >
                        <ForwardRef(SvgIcon)
                          className="icon-small"
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root icon-small"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M9.00787402,8.25488372 L1.66929134,15.624186 C1.56430446,15.7296124 1.44356955,15.7823256 1.30708661,15.7823256 C1.17060367,15.7823256 1.04986877,15.7296124 0.94488189,15.624186 L0.157480315,14.8334884 C0.0524934383,14.728062 0,14.6068217 0,14.4697674 C0,14.3327132 0.0524934383,14.2114729 0.157480315,14.1060465 L6.34645669,7.89116279 L0.157480315,1.67627907 C0.0524934383,1.57085271 0,1.4496124 0,1.31255814 C0,1.17550388 0.0524934383,1.05426357 0.157480315,0.948837209 L0.94488189,0.158139535 C1.04986877,0.0527131783 1.17060367,0 1.30708661,0 C1.44356955,0 1.56430446,0.0527131783 1.66929134,0.158139535 L9.00787402,7.52744186 C9.11286089,7.63286822 9.16535433,7.75410853 9.16535433,7.89116279 C9.16535433,8.02821705 9.11286089,8.14945736 9.00787402,8.25488372 Z M26,15.4818605 L26,16.4939535 C26,16.6415504 25.9527559,16.7627907 25.8582677,16.8576744 C25.7637795,16.9525581 25.6430446,17 25.496063,17 L10.3779528,17 C10.2309711,17 10.1102362,16.9525581 10.015748,16.8576744 C9.92125984,16.7627907 9.87401575,16.6415504 9.87401575,16.4939535 L9.87401575,15.4818605 C9.87401575,15.3342636 9.92125984,15.2130233 10.015748,15.1181395 C10.1102362,15.0232558 10.2309711,14.975814 10.3779528,14.975814 L25.496063,14.975814 C25.6430446,14.975814 25.7637795,15.0232558 25.8582677,15.1181395 C25.9527559,15.2130233 26,15.3342636 26,15.4818605 Z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </div>
                  </Can>
                </div>
              </WorkflowHeader>
              <div
                className="chartContainer"
              >
                <WorkflowChart
                  data={
                    Object {
                      "__typename": "Workflow",
                      "edges": Array [
                        Object {
                          "__typename": "Edge",
                          "fromNode": "node1",
                          "id": "edgeId",
                          "toNode": "node2",
                        },
                      ],
                      "id": "workflowId",
                      "name": "Workflow Nane",
                      "nodes": Array [
                        Object {
                          "__typename": "Node",
                          "id": "nodeId",
                          "name": "Node Name",
                          "status": "STARTED",
                        },
                      ],
                    }
                  }
                  enableNodeClicks={true}
                  entrypointAddress="some-address"
                  entrypointStatus="STARTED"
                  height={0}
                  onInnerNodeClick={[Function]}
                  onInputNodeClick={[Function]}
                  tooltipRefs={null}
                  width={0}
                  workflowStatus="STARTED"
                >
                  <svg
                    height={0}
                    width={0}
                  />
                </WorkflowChart>
              </div>
            </div>
          </Workflow>
        </ApolloProvider>
      </MockedProvider>
    </Router>
  </BrowserRouter>
</Wrapper>
`;
