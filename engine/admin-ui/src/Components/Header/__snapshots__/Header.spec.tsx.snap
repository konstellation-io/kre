// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header matches snapshot 1`] = `
<Wrapper
  mocks={
    Array [
      Object {
        "request": Object {
          "query": Object {
            "definitions": Array [
              Object {
                "directives": Array [],
                "kind": "OperationDefinition",
                "name": Object {
                  "kind": "Name",
                  "value": "GetMe",
                },
                "operation": "query",
                "selectionSet": Object {
                  "kind": "SelectionSet",
                  "selections": Array [
                    Object {
                      "alias": undefined,
                      "arguments": Array [],
                      "directives": Array [],
                      "kind": "Field",
                      "name": Object {
                        "kind": "Name",
                        "value": "me",
                      },
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "id",
                            },
                            "selectionSet": undefined,
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "email",
                            },
                            "selectionSet": undefined,
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "accessLevel",
                            },
                            "selectionSet": undefined,
                          },
                        ],
                      },
                    },
                  ],
                },
                "variableDefinitions": Array [],
              },
            ],
            "kind": "Document",
            "loc": Object {
              "end": 75,
              "start": 0,
            },
          },
        },
        "result": Object {
          "data": Object {
            "me": Object {
              "accessLevel": "ADMIN",
              "email": "user@konstellation.com",
              "id": "someId",
            },
          },
        },
      },
    ]
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <MockedProvider
        addTypename={false}
        mocks={
          Array [
            Object {
              "request": Object {
                "query": Object {
                  "definitions": Array [
                    Object {
                      "directives": Array [],
                      "kind": "OperationDefinition",
                      "name": Object {
                        "kind": "Name",
                        "value": "GetMe",
                      },
                      "operation": "query",
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "me",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "id",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "email",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "accessLevel",
                                  },
                                  "selectionSet": undefined,
                                },
                              ],
                            },
                          },
                        ],
                      },
                      "variableDefinitions": Array [],
                    },
                  ],
                  "kind": "Document",
                  "loc": Object {
                    "end": 75,
                    "start": 0,
                  },
                },
              },
              "result": Object {
                "data": Object {
                  "me": Object {
                    "accessLevel": "ADMIN",
                    "email": "user@konstellation.com",
                    "id": "someId",
                  },
                },
              },
            },
          ]
        }
      >
        <ApolloProvider
          client={
            ApolloClient {
              "cache": InMemoryCache {
                "addTypename": false,
                "config": Object {
                  "addTypename": false,
                  "dataIdFromObject": [Function],
                  "resultCaching": true,
                  "typePolicies": Object {},
                },
                "data": Root {
                  "canRead": [Function],
                  "data": Object {
                    "ROOT_QUERY": Object {
                      "__typename": "Query",
                      "me": Object {
                        "accessLevel": "ADMIN",
                        "email": "user@konstellation.com",
                        "id": "someId",
                      },
                    },
                  },
                  "getFieldValue": [Function],
                  "group": CacheGroup {
                    "caching": true,
                    "d": [Function],
                    "keyMaker": Trie {
                      "makeData": [Function],
                      "weak": WeakMap {},
                      "weakness": true,
                    },
                  },
                  "policies": Policies {
                    "cache": [Circular],
                    "config": Object {
                      "cache": [Circular],
                      "dataIdFromObject": [Function],
                      "possibleTypes": undefined,
                      "typePolicies": Object {},
                    },
                    "fuzzySubtypes": Map {},
                    "rootIdsByTypename": Object {
                      "Mutation": "ROOT_MUTATION",
                      "Query": "ROOT_QUERY",
                      "Subscription": "ROOT_SUBSCRIPTION",
                    },
                    "rootTypenamesById": Object {
                      "ROOT_MUTATION": "Mutation",
                      "ROOT_QUERY": "Query",
                      "ROOT_SUBSCRIPTION": "Subscription",
                    },
                    "supertypeMap": Map {},
                    "toBeAdded": Object {},
                    "typePolicies": Object {
                      "Query": Object {
                        "fields": Object {},
                      },
                    },
                    "usingPossibleTypes": false,
                  },
                  "refs": Object {},
                  "rootIds": Object {
                    "ROOT_QUERY": 1,
                  },
                  "sharedLayerGroup": CacheGroup {
                    "caching": true,
                    "d": [Function],
                    "keyMaker": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                  },
                  "storageTrie": Trie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "toReference": [Function],
                },
                "evict": [Function],
                "getFragmentDoc": [Function],
                "makeVar": [Function],
                "maybeBroadcastWatch": [Function],
                "modify": [Function],
                "optimisticData": Root {
                  "canRead": [Function],
                  "data": Object {
                    "ROOT_QUERY": Object {
                      "__typename": "Query",
                      "me": Object {
                        "accessLevel": "ADMIN",
                        "email": "user@konstellation.com",
                        "id": "someId",
                      },
                    },
                  },
                  "getFieldValue": [Function],
                  "group": CacheGroup {
                    "caching": true,
                    "d": [Function],
                    "keyMaker": Trie {
                      "makeData": [Function],
                      "weak": WeakMap {},
                      "weakness": true,
                    },
                  },
                  "policies": Policies {
                    "cache": [Circular],
                    "config": Object {
                      "cache": [Circular],
                      "dataIdFromObject": [Function],
                      "possibleTypes": undefined,
                      "typePolicies": Object {},
                    },
                    "fuzzySubtypes": Map {},
                    "rootIdsByTypename": Object {
                      "Mutation": "ROOT_MUTATION",
                      "Query": "ROOT_QUERY",
                      "Subscription": "ROOT_SUBSCRIPTION",
                    },
                    "rootTypenamesById": Object {
                      "ROOT_MUTATION": "Mutation",
                      "ROOT_QUERY": "Query",
                      "ROOT_SUBSCRIPTION": "Subscription",
                    },
                    "supertypeMap": Map {},
                    "toBeAdded": Object {},
                    "typePolicies": Object {
                      "Query": Object {
                        "fields": Object {},
                      },
                    },
                    "usingPossibleTypes": false,
                  },
                  "refs": Object {},
                  "rootIds": Object {
                    "ROOT_QUERY": 1,
                  },
                  "sharedLayerGroup": CacheGroup {
                    "caching": true,
                    "d": [Function],
                    "keyMaker": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                  },
                  "storageTrie": Trie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "toReference": [Function],
                },
                "policies": Policies {
                  "cache": [Circular],
                  "config": Object {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": Object {},
                  },
                  "fuzzySubtypes": Map {},
                  "rootIdsByTypename": Object {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": Object {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "supertypeMap": Map {},
                  "toBeAdded": Object {},
                  "typePolicies": Object {
                    "Query": Object {
                      "fields": Object {},
                    },
                  },
                  "usingPossibleTypes": false,
                },
                "reset": [Function],
                "storeReader": StoreReader {
                  "config": Object {
                    "addTypename": false,
                    "cache": [Circular],
                  },
                  "executeSelectionSet": [Function],
                  "executeSubSelectedArray": [Function],
                  "knownResults": WeakMap {},
                },
                "storeWriter": StoreWriter {
                  "cache": [Circular],
                  "reader": StoreReader {
                    "config": Object {
                      "addTypename": false,
                      "cache": [Circular],
                    },
                    "executeSelectionSet": [Function],
                    "executeSubSelectedArray": [Function],
                    "knownResults": WeakMap {},
                  },
                },
                "txCount": 0,
                "typenameDocumentCache": Map {},
                "watchDep": [Function],
                "watches": Set {
                  Object {
                    "callback": [Function],
                    "optimistic": true,
                    "query": Object {
                      "definitions": Array [
                        Object {
                          "directives": Array [],
                          "kind": "OperationDefinition",
                          "name": Object {
                            "kind": "Name",
                            "value": "GetMe",
                          },
                          "operation": "query",
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "alias": undefined,
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "me",
                                },
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "id",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "email",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "accessLevel",
                                      },
                                      "selectionSet": undefined,
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          "variableDefinitions": Array [],
                        },
                      ],
                      "kind": "Document",
                      "loc": Object {
                        "end": 75,
                        "start": 0,
                      },
                    },
                    "variables": Object {},
                  },
                },
              },
              "clearStoreCallbacks": Array [],
              "defaultOptions": Object {},
              "disableNetworkFetches": false,
              "link": MockLink {
                "addTypename": false,
                "mockedResponsesByKey": Object {
                  "{\\"query\\":\\"query GetMe {\\\\n  me {\\\\n    id\\\\n    email\\\\n    accessLevel\\\\n  }\\\\n}\\\\n\\"}": Array [],
                },
                "operation": Object {
                  "extensions": Object {},
                  "operationName": "GetMe",
                  "query": Object {
                    "definitions": Array [
                      Object {
                        "directives": Array [],
                        "kind": "OperationDefinition",
                        "name": Object {
                          "kind": "Name",
                          "value": "GetMe",
                        },
                        "operation": "query",
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "me",
                              },
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "id",
                                    },
                                    "selectionSet": undefined,
                                  },
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "email",
                                    },
                                    "selectionSet": undefined,
                                  },
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "accessLevel",
                                    },
                                    "selectionSet": undefined,
                                  },
                                ],
                              },
                            },
                          ],
                        },
                        "variableDefinitions": Array [],
                      },
                    ],
                    "kind": "Document",
                    "loc": Object {
                      "end": 75,
                      "start": 0,
                    },
                  },
                  "variables": Object {},
                },
              },
              "localState": LocalState {
                "cache": InMemoryCache {
                  "addTypename": false,
                  "config": Object {
                    "addTypename": false,
                    "dataIdFromObject": [Function],
                    "resultCaching": true,
                    "typePolicies": Object {},
                  },
                  "data": Root {
                    "canRead": [Function],
                    "data": Object {
                      "ROOT_QUERY": Object {
                        "__typename": "Query",
                        "me": Object {
                          "accessLevel": "ADMIN",
                          "email": "user@konstellation.com",
                          "id": "someId",
                        },
                      },
                    },
                    "getFieldValue": [Function],
                    "group": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weak": WeakMap {},
                        "weakness": true,
                      },
                    },
                    "policies": Policies {
                      "cache": [Circular],
                      "config": Object {
                        "cache": [Circular],
                        "dataIdFromObject": [Function],
                        "possibleTypes": undefined,
                        "typePolicies": Object {},
                      },
                      "fuzzySubtypes": Map {},
                      "rootIdsByTypename": Object {
                        "Mutation": "ROOT_MUTATION",
                        "Query": "ROOT_QUERY",
                        "Subscription": "ROOT_SUBSCRIPTION",
                      },
                      "rootTypenamesById": Object {
                        "ROOT_MUTATION": "Mutation",
                        "ROOT_QUERY": "Query",
                        "ROOT_SUBSCRIPTION": "Subscription",
                      },
                      "supertypeMap": Map {},
                      "toBeAdded": Object {},
                      "typePolicies": Object {
                        "Query": Object {
                          "fields": Object {},
                        },
                      },
                      "usingPossibleTypes": false,
                    },
                    "refs": Object {},
                    "rootIds": Object {
                      "ROOT_QUERY": 1,
                    },
                    "sharedLayerGroup": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                    },
                    "storageTrie": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "toReference": [Function],
                  },
                  "evict": [Function],
                  "getFragmentDoc": [Function],
                  "makeVar": [Function],
                  "maybeBroadcastWatch": [Function],
                  "modify": [Function],
                  "optimisticData": Root {
                    "canRead": [Function],
                    "data": Object {
                      "ROOT_QUERY": Object {
                        "__typename": "Query",
                        "me": Object {
                          "accessLevel": "ADMIN",
                          "email": "user@konstellation.com",
                          "id": "someId",
                        },
                      },
                    },
                    "getFieldValue": [Function],
                    "group": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weak": WeakMap {},
                        "weakness": true,
                      },
                    },
                    "policies": Policies {
                      "cache": [Circular],
                      "config": Object {
                        "cache": [Circular],
                        "dataIdFromObject": [Function],
                        "possibleTypes": undefined,
                        "typePolicies": Object {},
                      },
                      "fuzzySubtypes": Map {},
                      "rootIdsByTypename": Object {
                        "Mutation": "ROOT_MUTATION",
                        "Query": "ROOT_QUERY",
                        "Subscription": "ROOT_SUBSCRIPTION",
                      },
                      "rootTypenamesById": Object {
                        "ROOT_MUTATION": "Mutation",
                        "ROOT_QUERY": "Query",
                        "ROOT_SUBSCRIPTION": "Subscription",
                      },
                      "supertypeMap": Map {},
                      "toBeAdded": Object {},
                      "typePolicies": Object {
                        "Query": Object {
                          "fields": Object {},
                        },
                      },
                      "usingPossibleTypes": false,
                    },
                    "refs": Object {},
                    "rootIds": Object {
                      "ROOT_QUERY": 1,
                    },
                    "sharedLayerGroup": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                    },
                    "storageTrie": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "toReference": [Function],
                  },
                  "policies": Policies {
                    "cache": [Circular],
                    "config": Object {
                      "cache": [Circular],
                      "dataIdFromObject": [Function],
                      "possibleTypes": undefined,
                      "typePolicies": Object {},
                    },
                    "fuzzySubtypes": Map {},
                    "rootIdsByTypename": Object {
                      "Mutation": "ROOT_MUTATION",
                      "Query": "ROOT_QUERY",
                      "Subscription": "ROOT_SUBSCRIPTION",
                    },
                    "rootTypenamesById": Object {
                      "ROOT_MUTATION": "Mutation",
                      "ROOT_QUERY": "Query",
                      "ROOT_SUBSCRIPTION": "Subscription",
                    },
                    "supertypeMap": Map {},
                    "toBeAdded": Object {},
                    "typePolicies": Object {
                      "Query": Object {
                        "fields": Object {},
                      },
                    },
                    "usingPossibleTypes": false,
                  },
                  "reset": [Function],
                  "storeReader": StoreReader {
                    "config": Object {
                      "addTypename": false,
                      "cache": [Circular],
                    },
                    "executeSelectionSet": [Function],
                    "executeSubSelectedArray": [Function],
                    "knownResults": WeakMap {},
                  },
                  "storeWriter": StoreWriter {
                    "cache": [Circular],
                    "reader": StoreReader {
                      "config": Object {
                        "addTypename": false,
                        "cache": [Circular],
                      },
                      "executeSelectionSet": [Function],
                      "executeSubSelectedArray": [Function],
                      "knownResults": WeakMap {},
                    },
                  },
                  "txCount": 0,
                  "typenameDocumentCache": Map {},
                  "watchDep": [Function],
                  "watches": Set {
                    Object {
                      "callback": [Function],
                      "optimistic": true,
                      "query": Object {
                        "definitions": Array [
                          Object {
                            "directives": Array [],
                            "kind": "OperationDefinition",
                            "name": Object {
                              "kind": "Name",
                              "value": "GetMe",
                            },
                            "operation": "query",
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "me",
                                  },
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "id",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "email",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "accessLevel",
                                        },
                                        "selectionSet": undefined,
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                            "variableDefinitions": Array [],
                          },
                        ],
                        "kind": "Document",
                        "loc": Object {
                          "end": 75,
                          "start": 0,
                        },
                      },
                      "variables": Object {},
                    },
                  },
                },
                "client": [Circular],
              },
              "mutate": [Function],
              "query": [Function],
              "queryDeduplication": true,
              "queryManager": QueryManager {
                "assumeImmutableResults": false,
                "cache": InMemoryCache {
                  "addTypename": false,
                  "config": Object {
                    "addTypename": false,
                    "dataIdFromObject": [Function],
                    "resultCaching": true,
                    "typePolicies": Object {},
                  },
                  "data": Root {
                    "canRead": [Function],
                    "data": Object {
                      "ROOT_QUERY": Object {
                        "__typename": "Query",
                        "me": Object {
                          "accessLevel": "ADMIN",
                          "email": "user@konstellation.com",
                          "id": "someId",
                        },
                      },
                    },
                    "getFieldValue": [Function],
                    "group": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weak": WeakMap {},
                        "weakness": true,
                      },
                    },
                    "policies": Policies {
                      "cache": [Circular],
                      "config": Object {
                        "cache": [Circular],
                        "dataIdFromObject": [Function],
                        "possibleTypes": undefined,
                        "typePolicies": Object {},
                      },
                      "fuzzySubtypes": Map {},
                      "rootIdsByTypename": Object {
                        "Mutation": "ROOT_MUTATION",
                        "Query": "ROOT_QUERY",
                        "Subscription": "ROOT_SUBSCRIPTION",
                      },
                      "rootTypenamesById": Object {
                        "ROOT_MUTATION": "Mutation",
                        "ROOT_QUERY": "Query",
                        "ROOT_SUBSCRIPTION": "Subscription",
                      },
                      "supertypeMap": Map {},
                      "toBeAdded": Object {},
                      "typePolicies": Object {
                        "Query": Object {
                          "fields": Object {},
                        },
                      },
                      "usingPossibleTypes": false,
                    },
                    "refs": Object {},
                    "rootIds": Object {
                      "ROOT_QUERY": 1,
                    },
                    "sharedLayerGroup": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                    },
                    "storageTrie": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "toReference": [Function],
                  },
                  "evict": [Function],
                  "getFragmentDoc": [Function],
                  "makeVar": [Function],
                  "maybeBroadcastWatch": [Function],
                  "modify": [Function],
                  "optimisticData": Root {
                    "canRead": [Function],
                    "data": Object {
                      "ROOT_QUERY": Object {
                        "__typename": "Query",
                        "me": Object {
                          "accessLevel": "ADMIN",
                          "email": "user@konstellation.com",
                          "id": "someId",
                        },
                      },
                    },
                    "getFieldValue": [Function],
                    "group": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weak": WeakMap {},
                        "weakness": true,
                      },
                    },
                    "policies": Policies {
                      "cache": [Circular],
                      "config": Object {
                        "cache": [Circular],
                        "dataIdFromObject": [Function],
                        "possibleTypes": undefined,
                        "typePolicies": Object {},
                      },
                      "fuzzySubtypes": Map {},
                      "rootIdsByTypename": Object {
                        "Mutation": "ROOT_MUTATION",
                        "Query": "ROOT_QUERY",
                        "Subscription": "ROOT_SUBSCRIPTION",
                      },
                      "rootTypenamesById": Object {
                        "ROOT_MUTATION": "Mutation",
                        "ROOT_QUERY": "Query",
                        "ROOT_SUBSCRIPTION": "Subscription",
                      },
                      "supertypeMap": Map {},
                      "toBeAdded": Object {},
                      "typePolicies": Object {
                        "Query": Object {
                          "fields": Object {},
                        },
                      },
                      "usingPossibleTypes": false,
                    },
                    "refs": Object {},
                    "rootIds": Object {
                      "ROOT_QUERY": 1,
                    },
                    "sharedLayerGroup": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                    },
                    "storageTrie": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "toReference": [Function],
                  },
                  "policies": Policies {
                    "cache": [Circular],
                    "config": Object {
                      "cache": [Circular],
                      "dataIdFromObject": [Function],
                      "possibleTypes": undefined,
                      "typePolicies": Object {},
                    },
                    "fuzzySubtypes": Map {},
                    "rootIdsByTypename": Object {
                      "Mutation": "ROOT_MUTATION",
                      "Query": "ROOT_QUERY",
                      "Subscription": "ROOT_SUBSCRIPTION",
                    },
                    "rootTypenamesById": Object {
                      "ROOT_MUTATION": "Mutation",
                      "ROOT_QUERY": "Query",
                      "ROOT_SUBSCRIPTION": "Subscription",
                    },
                    "supertypeMap": Map {},
                    "toBeAdded": Object {},
                    "typePolicies": Object {
                      "Query": Object {
                        "fields": Object {},
                      },
                    },
                    "usingPossibleTypes": false,
                  },
                  "reset": [Function],
                  "storeReader": StoreReader {
                    "config": Object {
                      "addTypename": false,
                      "cache": [Circular],
                    },
                    "executeSelectionSet": [Function],
                    "executeSubSelectedArray": [Function],
                    "knownResults": WeakMap {},
                  },
                  "storeWriter": StoreWriter {
                    "cache": [Circular],
                    "reader": StoreReader {
                      "config": Object {
                        "addTypename": false,
                        "cache": [Circular],
                      },
                      "executeSelectionSet": [Function],
                      "executeSubSelectedArray": [Function],
                      "knownResults": WeakMap {},
                    },
                  },
                  "txCount": 0,
                  "typenameDocumentCache": Map {},
                  "watchDep": [Function],
                  "watches": Set {
                    Object {
                      "callback": [Function],
                      "optimistic": true,
                      "query": Object {
                        "definitions": Array [
                          Object {
                            "directives": Array [],
                            "kind": "OperationDefinition",
                            "name": Object {
                              "kind": "Name",
                              "value": "GetMe",
                            },
                            "operation": "query",
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "me",
                                  },
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "id",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "email",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "accessLevel",
                                        },
                                        "selectionSet": undefined,
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                            "variableDefinitions": Array [],
                          },
                        ],
                        "kind": "Document",
                        "loc": Object {
                          "end": 75,
                          "start": 0,
                        },
                      },
                      "variables": Object {},
                    },
                  },
                },
                "clientAwareness": Object {
                  "name": undefined,
                  "version": undefined,
                },
                "fetchCancelFns": Map {},
                "inFlightLinkObservables": Map {},
                "link": MockLink {
                  "addTypename": false,
                  "mockedResponsesByKey": Object {
                    "{\\"query\\":\\"query GetMe {\\\\n  me {\\\\n    id\\\\n    email\\\\n    accessLevel\\\\n  }\\\\n}\\\\n\\"}": Array [],
                  },
                  "operation": Object {
                    "extensions": Object {},
                    "operationName": "GetMe",
                    "query": Object {
                      "definitions": Array [
                        Object {
                          "directives": Array [],
                          "kind": "OperationDefinition",
                          "name": Object {
                            "kind": "Name",
                            "value": "GetMe",
                          },
                          "operation": "query",
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "alias": undefined,
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "me",
                                },
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "id",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "email",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "accessLevel",
                                      },
                                      "selectionSet": undefined,
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          "variableDefinitions": Array [],
                        },
                      ],
                      "kind": "Document",
                      "loc": Object {
                        "end": 75,
                        "start": 0,
                      },
                    },
                    "variables": Object {},
                  },
                },
                "localState": LocalState {
                  "cache": InMemoryCache {
                    "addTypename": false,
                    "config": Object {
                      "addTypename": false,
                      "dataIdFromObject": [Function],
                      "resultCaching": true,
                      "typePolicies": Object {},
                    },
                    "data": Root {
                      "canRead": [Function],
                      "data": Object {
                        "ROOT_QUERY": Object {
                          "__typename": "Query",
                          "me": Object {
                            "accessLevel": "ADMIN",
                            "email": "user@konstellation.com",
                            "id": "someId",
                          },
                        },
                      },
                      "getFieldValue": [Function],
                      "group": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": Trie {
                          "makeData": [Function],
                          "weak": WeakMap {},
                          "weakness": true,
                        },
                      },
                      "policies": Policies {
                        "cache": [Circular],
                        "config": Object {
                          "cache": [Circular],
                          "dataIdFromObject": [Function],
                          "possibleTypes": undefined,
                          "typePolicies": Object {},
                        },
                        "fuzzySubtypes": Map {},
                        "rootIdsByTypename": Object {
                          "Mutation": "ROOT_MUTATION",
                          "Query": "ROOT_QUERY",
                          "Subscription": "ROOT_SUBSCRIPTION",
                        },
                        "rootTypenamesById": Object {
                          "ROOT_MUTATION": "Mutation",
                          "ROOT_QUERY": "Query",
                          "ROOT_SUBSCRIPTION": "Subscription",
                        },
                        "supertypeMap": Map {},
                        "toBeAdded": Object {},
                        "typePolicies": Object {
                          "Query": Object {
                            "fields": Object {},
                          },
                        },
                        "usingPossibleTypes": false,
                      },
                      "refs": Object {},
                      "rootIds": Object {
                        "ROOT_QUERY": 1,
                      },
                      "sharedLayerGroup": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                      },
                      "storageTrie": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "toReference": [Function],
                    },
                    "evict": [Function],
                    "getFragmentDoc": [Function],
                    "makeVar": [Function],
                    "maybeBroadcastWatch": [Function],
                    "modify": [Function],
                    "optimisticData": Root {
                      "canRead": [Function],
                      "data": Object {
                        "ROOT_QUERY": Object {
                          "__typename": "Query",
                          "me": Object {
                            "accessLevel": "ADMIN",
                            "email": "user@konstellation.com",
                            "id": "someId",
                          },
                        },
                      },
                      "getFieldValue": [Function],
                      "group": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": Trie {
                          "makeData": [Function],
                          "weak": WeakMap {},
                          "weakness": true,
                        },
                      },
                      "policies": Policies {
                        "cache": [Circular],
                        "config": Object {
                          "cache": [Circular],
                          "dataIdFromObject": [Function],
                          "possibleTypes": undefined,
                          "typePolicies": Object {},
                        },
                        "fuzzySubtypes": Map {},
                        "rootIdsByTypename": Object {
                          "Mutation": "ROOT_MUTATION",
                          "Query": "ROOT_QUERY",
                          "Subscription": "ROOT_SUBSCRIPTION",
                        },
                        "rootTypenamesById": Object {
                          "ROOT_MUTATION": "Mutation",
                          "ROOT_QUERY": "Query",
                          "ROOT_SUBSCRIPTION": "Subscription",
                        },
                        "supertypeMap": Map {},
                        "toBeAdded": Object {},
                        "typePolicies": Object {
                          "Query": Object {
                            "fields": Object {},
                          },
                        },
                        "usingPossibleTypes": false,
                      },
                      "refs": Object {},
                      "rootIds": Object {
                        "ROOT_QUERY": 1,
                      },
                      "sharedLayerGroup": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                      },
                      "storageTrie": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "toReference": [Function],
                    },
                    "policies": Policies {
                      "cache": [Circular],
                      "config": Object {
                        "cache": [Circular],
                        "dataIdFromObject": [Function],
                        "possibleTypes": undefined,
                        "typePolicies": Object {},
                      },
                      "fuzzySubtypes": Map {},
                      "rootIdsByTypename": Object {
                        "Mutation": "ROOT_MUTATION",
                        "Query": "ROOT_QUERY",
                        "Subscription": "ROOT_SUBSCRIPTION",
                      },
                      "rootTypenamesById": Object {
                        "ROOT_MUTATION": "Mutation",
                        "ROOT_QUERY": "Query",
                        "ROOT_SUBSCRIPTION": "Subscription",
                      },
                      "supertypeMap": Map {},
                      "toBeAdded": Object {},
                      "typePolicies": Object {
                        "Query": Object {
                          "fields": Object {},
                        },
                      },
                      "usingPossibleTypes": false,
                    },
                    "reset": [Function],
                    "storeReader": StoreReader {
                      "config": Object {
                        "addTypename": false,
                        "cache": [Circular],
                      },
                      "executeSelectionSet": [Function],
                      "executeSubSelectedArray": [Function],
                      "knownResults": WeakMap {},
                    },
                    "storeWriter": StoreWriter {
                      "cache": [Circular],
                      "reader": StoreReader {
                        "config": Object {
                          "addTypename": false,
                          "cache": [Circular],
                        },
                        "executeSelectionSet": [Function],
                        "executeSubSelectedArray": [Function],
                        "knownResults": WeakMap {},
                      },
                    },
                    "txCount": 0,
                    "typenameDocumentCache": Map {},
                    "watchDep": [Function],
                    "watches": Set {
                      Object {
                        "callback": [Function],
                        "optimistic": true,
                        "query": Object {
                          "definitions": Array [
                            Object {
                              "directives": Array [],
                              "kind": "OperationDefinition",
                              "name": Object {
                                "kind": "Name",
                                "value": "GetMe",
                              },
                              "operation": "query",
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "me",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "email",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "accessLevel",
                                          },
                                          "selectionSet": undefined,
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                              "variableDefinitions": Array [],
                            },
                          ],
                          "kind": "Document",
                          "loc": Object {
                            "end": 75,
                            "start": 0,
                          },
                        },
                        "variables": Object {},
                      },
                    },
                  },
                  "client": [Circular],
                },
                "mutationIdCounter": 1,
                "mutationStore": Object {},
                "onBroadcast": [Function],
                "queries": Map {
                  "1" => QueryInfo {
                    "cache": InMemoryCache {
                      "addTypename": false,
                      "config": Object {
                        "addTypename": false,
                        "dataIdFromObject": [Function],
                        "resultCaching": true,
                        "typePolicies": Object {},
                      },
                      "data": Root {
                        "canRead": [Function],
                        "data": Object {
                          "ROOT_QUERY": Object {
                            "__typename": "Query",
                            "me": Object {
                              "accessLevel": "ADMIN",
                              "email": "user@konstellation.com",
                              "id": "someId",
                            },
                          },
                        },
                        "getFieldValue": [Function],
                        "group": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": Trie {
                            "makeData": [Function],
                            "weak": WeakMap {},
                            "weakness": true,
                          },
                        },
                        "policies": Policies {
                          "cache": [Circular],
                          "config": Object {
                            "cache": [Circular],
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": Object {},
                          },
                          "fuzzySubtypes": Map {},
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "supertypeMap": Map {},
                          "toBeAdded": Object {},
                          "typePolicies": Object {
                            "Query": Object {
                              "fields": Object {},
                            },
                          },
                          "usingPossibleTypes": false,
                        },
                        "refs": Object {},
                        "rootIds": Object {
                          "ROOT_QUERY": 1,
                        },
                        "sharedLayerGroup": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": Trie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                        },
                        "storageTrie": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "toReference": [Function],
                      },
                      "evict": [Function],
                      "getFragmentDoc": [Function],
                      "makeVar": [Function],
                      "maybeBroadcastWatch": [Function],
                      "modify": [Function],
                      "optimisticData": Root {
                        "canRead": [Function],
                        "data": Object {
                          "ROOT_QUERY": Object {
                            "__typename": "Query",
                            "me": Object {
                              "accessLevel": "ADMIN",
                              "email": "user@konstellation.com",
                              "id": "someId",
                            },
                          },
                        },
                        "getFieldValue": [Function],
                        "group": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": Trie {
                            "makeData": [Function],
                            "weak": WeakMap {},
                            "weakness": true,
                          },
                        },
                        "policies": Policies {
                          "cache": [Circular],
                          "config": Object {
                            "cache": [Circular],
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": Object {},
                          },
                          "fuzzySubtypes": Map {},
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "supertypeMap": Map {},
                          "toBeAdded": Object {},
                          "typePolicies": Object {
                            "Query": Object {
                              "fields": Object {},
                            },
                          },
                          "usingPossibleTypes": false,
                        },
                        "refs": Object {},
                        "rootIds": Object {
                          "ROOT_QUERY": 1,
                        },
                        "sharedLayerGroup": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": Trie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                        },
                        "storageTrie": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "toReference": [Function],
                      },
                      "policies": Policies {
                        "cache": [Circular],
                        "config": Object {
                          "cache": [Circular],
                          "dataIdFromObject": [Function],
                          "possibleTypes": undefined,
                          "typePolicies": Object {},
                        },
                        "fuzzySubtypes": Map {},
                        "rootIdsByTypename": Object {
                          "Mutation": "ROOT_MUTATION",
                          "Query": "ROOT_QUERY",
                          "Subscription": "ROOT_SUBSCRIPTION",
                        },
                        "rootTypenamesById": Object {
                          "ROOT_MUTATION": "Mutation",
                          "ROOT_QUERY": "Query",
                          "ROOT_SUBSCRIPTION": "Subscription",
                        },
                        "supertypeMap": Map {},
                        "toBeAdded": Object {},
                        "typePolicies": Object {
                          "Query": Object {
                            "fields": Object {},
                          },
                        },
                        "usingPossibleTypes": false,
                      },
                      "reset": [Function],
                      "storeReader": StoreReader {
                        "config": Object {
                          "addTypename": false,
                          "cache": [Circular],
                        },
                        "executeSelectionSet": [Function],
                        "executeSubSelectedArray": [Function],
                        "knownResults": WeakMap {},
                      },
                      "storeWriter": StoreWriter {
                        "cache": [Circular],
                        "reader": StoreReader {
                          "config": Object {
                            "addTypename": false,
                            "cache": [Circular],
                          },
                          "executeSelectionSet": [Function],
                          "executeSubSelectedArray": [Function],
                          "knownResults": WeakMap {},
                        },
                      },
                      "txCount": 0,
                      "typenameDocumentCache": Map {},
                      "watchDep": [Function],
                      "watches": Set {
                        Object {
                          "callback": [Function],
                          "optimistic": true,
                          "query": Object {
                            "definitions": Array [
                              Object {
                                "directives": Array [],
                                "kind": "OperationDefinition",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "GetMe",
                                },
                                "operation": "query",
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "me",
                                      },
                                      "selectionSet": Object {
                                        "kind": "SelectionSet",
                                        "selections": Array [
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "id",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "email",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "accessLevel",
                                            },
                                            "selectionSet": undefined,
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                                "variableDefinitions": Array [],
                              },
                            ],
                            "kind": "Document",
                            "loc": Object {
                              "end": 75,
                              "start": 0,
                            },
                          },
                          "variables": Object {},
                        },
                      },
                    },
                    "cancel": [Function],
                    "diff": Object {
                      "complete": true,
                      "missing": undefined,
                      "result": Object {
                        "me": Object {
                          "accessLevel": "ADMIN",
                          "email": "user@konstellation.com",
                          "id": "someId",
                        },
                      },
                    },
                    "dirty": false,
                    "document": Object {
                      "definitions": Array [
                        Object {
                          "directives": Array [],
                          "kind": "OperationDefinition",
                          "name": Object {
                            "kind": "Name",
                            "value": "GetMe",
                          },
                          "operation": "query",
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "alias": undefined,
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "me",
                                },
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "id",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "email",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "accessLevel",
                                      },
                                      "selectionSet": undefined,
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          "variableDefinitions": Array [],
                        },
                      ],
                      "kind": "Document",
                      "loc": Object {
                        "end": 75,
                        "start": 0,
                      },
                    },
                    "graphQLErrors": Array [],
                    "lastRequestId": 1,
                    "lastWatch": Object {
                      "callback": [Function],
                      "optimistic": true,
                      "query": Object {
                        "definitions": Array [
                          Object {
                            "directives": Array [],
                            "kind": "OperationDefinition",
                            "name": Object {
                              "kind": "Name",
                              "value": "GetMe",
                            },
                            "operation": "query",
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "me",
                                  },
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "id",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "email",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "accessLevel",
                                        },
                                        "selectionSet": undefined,
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                            "variableDefinitions": Array [],
                          },
                        ],
                        "kind": "Document",
                        "loc": Object {
                          "end": 75,
                          "start": 0,
                        },
                      },
                      "variables": Object {},
                    },
                    "lastWrite": Object {
                      "dmCount": 0,
                      "result": Object {
                        "data": Object {
                          "me": Object {
                            "accessLevel": "ADMIN",
                            "email": "user@konstellation.com",
                            "id": "someId",
                          },
                        },
                      },
                      "variables": Object {},
                    },
                    "listeners": Set {
                      [Function],
                    },
                    "networkError": undefined,
                    "networkStatus": 7,
                    "observableQuery": ObservableQuery {
                      "_subscriber": [Function],
                      "isTornDown": false,
                      "lastResult": Object {
                        "data": Object {
                          "me": Object {
                            "accessLevel": "ADMIN",
                            "email": "user@konstellation.com",
                            "id": "someId",
                          },
                        },
                        "loading": false,
                        "networkStatus": 7,
                      },
                      "lastResultSnapshot": Object {
                        "data": Object {
                          "me": Object {
                            "accessLevel": "ADMIN",
                            "email": "user@konstellation.com",
                            "id": "someId",
                          },
                        },
                        "loading": false,
                        "networkStatus": 7,
                      },
                      "observer": Object {
                        "error": [Function],
                        "next": [Function],
                      },
                      "observers": Set {
                        SubscriptionObserver {
                          "_subscription": Subscription {
                            "_cleanup": [Function],
                            "_observer": Object {
                              "error": [Function],
                              "next": [Function],
                            },
                            "_queue": undefined,
                            "_state": "ready",
                          },
                        },
                      },
                      "options": Object {
                        "context": undefined,
                        "displayName": "Query",
                        "notifyOnNetworkStatusChange": false,
                        "query": Object {
                          "definitions": Array [
                            Object {
                              "directives": Array [],
                              "kind": "OperationDefinition",
                              "name": Object {
                                "kind": "Name",
                                "value": "GetMe",
                              },
                              "operation": "query",
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "me",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "email",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "accessLevel",
                                          },
                                          "selectionSet": undefined,
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                              "variableDefinitions": Array [],
                            },
                          ],
                          "kind": "Document",
                          "loc": Object {
                            "end": 75,
                            "start": 0,
                          },
                        },
                        "variables": Object {},
                      },
                      "queryId": "1",
                      "queryInfo": [Circular],
                      "queryManager": [Circular],
                      "queryName": "GetMe",
                      "reobserver": Reobserver {
                        "concast": Concast {
                          "_subscriber": [Function],
                          "addCount": 1,
                          "cancel": [Function],
                          "handlers": Object {
                            "complete": [Function],
                            "error": [Function],
                            "next": [Function],
                          },
                          "latest": Array [
                            "next",
                            Object {
                              "data": Object {
                                "me": Object {
                                  "accessLevel": "ADMIN",
                                  "email": "user@konstellation.com",
                                  "id": "someId",
                                },
                              },
                              "loading": false,
                              "networkStatus": 7,
                            },
                          ],
                          "observers": Set {
                            Object {
                              "error": [Function],
                              "next": [Function],
                            },
                          },
                          "promise": Promise {},
                          "reject": [Function],
                          "resolve": [Function],
                          "sources": Array [],
                          "sub": null,
                        },
                        "fetch": [Function],
                        "observer": Object {
                          "error": [Function],
                          "next": [Function],
                        },
                        "options": Object {
                          "context": undefined,
                          "displayName": "Query",
                          "notifyOnNetworkStatusChange": false,
                          "query": Object {
                            "definitions": Array [
                              Object {
                                "directives": Array [],
                                "kind": "OperationDefinition",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "GetMe",
                                },
                                "operation": "query",
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "me",
                                      },
                                      "selectionSet": Object {
                                        "kind": "SelectionSet",
                                        "selections": Array [
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "id",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "email",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "accessLevel",
                                            },
                                            "selectionSet": undefined,
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                                "variableDefinitions": Array [],
                              },
                            ],
                            "kind": "Document",
                            "loc": Object {
                              "end": 75,
                              "start": 0,
                            },
                          },
                          "variables": Object {},
                        },
                        "shouldFetch": [Function],
                      },
                      "subscriptions": Set {},
                    },
                    "oqListener": [Function],
                    "stopped": false,
                    "subscriptions": Set {},
                    "variables": Object {},
                  },
                },
                "queryDeduplication": true,
                "queryIdCounter": 2,
                "requestIdCounter": 2,
                "ssrMode": false,
                "transformCache": WeakMap {},
              },
              "reFetchObservableQueries": [Function],
              "resetStore": [Function],
              "resetStoreCallbacks": Array [],
              "typeDefs": undefined,
              "version": "3.3.19",
              "watchQuery": [Function],
            }
          }
        >
          <Memo(Header)>
            <header
              className="container"
              data-testid="app-header"
            >
              <Link
                className=""
                to="/"
              >
                <LinkAnchor
                  className=""
                  href="/"
                  navigate={[Function]}
                >
                  <a
                    className=""
                    href="/"
                    onClick={[Function]}
                  >
                    <img
                      alt="konstellation"
                      className="konstellationText"
                      src="/img/brand/konstellation.svg"
                    />
                  </a>
                </LinkAnchor>
              </Link>
              <div
                className="customHeaderElements"
              />
              <Memo(Settings)
                label="user@konstellation.com"
              >
                <div
                  className="container"
                  data-testid="settingsContainer"
                  onClick={[Function]}
                >
                  <div
                    className="label"
                    data-testid="settings-label"
                  >
                    user@konstellation.com
                  </div>
                  <div
                    className="options"
                    data-testid="settingsContent"
                    style={
                      Object {
                        "maxHeight": 0,
                      }
                    }
                  >
                    <P
                      Icon={
                        Object {
                          "$$typeof": Symbol(react.memo),
                          "compare": null,
                          "displayName": "HomeIcon",
                          "muiName": "SvgIcon",
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "render": [Function],
                          },
                        }
                      }
                      align="left"
                      key="buttonVersions"
                      label="VERSIONS"
                      style={
                        Object {
                          "paddingLeft": "20%",
                        }
                      }
                      to="/versions"
                    >
                      <Link
                        data-testid="buttonLink"
                        to="/versions"
                      >
                        <LinkAnchor
                          data-testid="buttonLink"
                          href="/versions"
                          navigate={[Function]}
                        >
                          <a
                            data-testid="buttonLink"
                            href="/versions"
                            onClick={[Function]}
                          >
                            <div
                              className="_1lqJX _3ZftH _zeH0N undefined"
                              onClick={[Function]}
                              onKeyPress={[Function]}
                              style={
                                Object {
                                  "height": 40,
                                  "lineHeight": "40px",
                                  "paddingLeft": "20%",
                                }
                              }
                              tabIndex={-1}
                              title=""
                            >
                              <ForwardRef
                                className="icon-small"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="icon-small"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="icon-small"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root icon-small"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef>
                              <span>
                                VERSIONS
                              </span>
                            </div>
                          </a>
                        </LinkAnchor>
                      </Link>
                    </P>
                    <P
                      Icon={
                        Object {
                          "$$typeof": Symbol(react.memo),
                          "compare": null,
                          "displayName": "VerifiedUserIcon",
                          "muiName": "SvgIcon",
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "render": [Function],
                          },
                        }
                      }
                      align="left"
                      key="buttonSettings"
                      label="SETTINGS"
                      style={
                        Object {
                          "paddingLeft": "20%",
                        }
                      }
                      to="/settings"
                    >
                      <Link
                        data-testid="buttonLink"
                        to="/settings"
                      >
                        <LinkAnchor
                          data-testid="buttonLink"
                          href="/settings"
                          navigate={[Function]}
                        >
                          <a
                            data-testid="buttonLink"
                            href="/settings"
                            onClick={[Function]}
                          >
                            <div
                              className="_1lqJX _3ZftH _zeH0N undefined"
                              onClick={[Function]}
                              onKeyPress={[Function]}
                              style={
                                Object {
                                  "height": 40,
                                  "lineHeight": "40px",
                                  "paddingLeft": "20%",
                                }
                              }
                              tabIndex={-1}
                              title=""
                            >
                              <ForwardRef
                                className="icon-small"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="icon-small"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="icon-small"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root icon-small"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm-2 16l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef>
                              <span>
                                SETTINGS
                              </span>
                            </div>
                          </a>
                        </LinkAnchor>
                      </Link>
                    </P>
                    <P
                      Icon={
                        Object {
                          "$$typeof": Symbol(react.memo),
                          "compare": null,
                          "displayName": "SupervisorAccountIcon",
                          "muiName": "SvgIcon",
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "render": [Function],
                          },
                        }
                      }
                      align="left"
                      key="buttonUsers"
                      label="USERS"
                      style={
                        Object {
                          "paddingLeft": "20%",
                        }
                      }
                      to="/users"
                    >
                      <Link
                        data-testid="buttonLink"
                        to="/users"
                      >
                        <LinkAnchor
                          data-testid="buttonLink"
                          href="/users"
                          navigate={[Function]}
                        >
                          <a
                            data-testid="buttonLink"
                            href="/users"
                            onClick={[Function]}
                          >
                            <div
                              className="_1lqJX _3ZftH _zeH0N undefined"
                              onClick={[Function]}
                              onKeyPress={[Function]}
                              style={
                                Object {
                                  "height": 40,
                                  "lineHeight": "40px",
                                  "paddingLeft": "20%",
                                }
                              }
                              tabIndex={-1}
                              title=""
                            >
                              <ForwardRef
                                className="icon-small"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="icon-small"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="icon-small"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root icon-small"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M16.5 12c1.38 0 2.49-1.12 2.49-2.5S17.88 7 16.5 7C15.12 7 14 8.12 14 9.5s1.12 2.5 2.5 2.5zM9 11c1.66 0 2.99-1.34 2.99-3S10.66 5 9 5C7.34 5 6 6.34 6 8s1.34 3 3 3zm7.5 3c-1.83 0-5.5.92-5.5 2.75V19h11v-2.25c0-1.83-3.67-2.75-5.5-2.75zM9 13c-2.33 0-7 1.17-7 3.5V19h7v-2.25c0-.85.33-2.34 2.37-3.47C10.5 13.1 9.66 13 9 13z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef>
                              <span>
                                USERS
                              </span>
                            </div>
                          </a>
                        </LinkAnchor>
                      </Link>
                    </P>
                    <P
                      Icon={
                        Object {
                          "$$typeof": Symbol(react.memo),
                          "compare": null,
                          "displayName": "EventNoteIcon",
                          "muiName": "SvgIcon",
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "render": [Function],
                          },
                        }
                      }
                      align="left"
                      key="buttonAudit"
                      label="AUDIT"
                      style={
                        Object {
                          "paddingLeft": "20%",
                        }
                      }
                      to="/audit"
                    >
                      <Link
                        data-testid="buttonLink"
                        to="/audit"
                      >
                        <LinkAnchor
                          data-testid="buttonLink"
                          href="/audit"
                          navigate={[Function]}
                        >
                          <a
                            data-testid="buttonLink"
                            href="/audit"
                            onClick={[Function]}
                          >
                            <div
                              className="_1lqJX _3ZftH _zeH0N undefined"
                              onClick={[Function]}
                              onKeyPress={[Function]}
                              style={
                                Object {
                                  "height": 40,
                                  "lineHeight": "40px",
                                  "paddingLeft": "20%",
                                }
                              }
                              tabIndex={-1}
                              title=""
                            >
                              <ForwardRef
                                className="icon-small"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="icon-small"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="icon-small"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root icon-small"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M17 10H7v2h10v-2zm2-7h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zm-5-5H7v2h7v-2z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef>
                              <span>
                                AUDIT
                              </span>
                            </div>
                          </a>
                        </LinkAnchor>
                      </Link>
                    </P>
                    <P
                      Icon={
                        Object {
                          "$$typeof": Symbol(react.memo),
                          "compare": null,
                          "displayName": "PersonIcon",
                          "muiName": "SvgIcon",
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "render": [Function],
                          },
                        }
                      }
                      align="left"
                      key="buttonProfile"
                      label="PROFILE"
                      style={
                        Object {
                          "paddingLeft": "20%",
                        }
                      }
                      to="/profile"
                    >
                      <Link
                        data-testid="buttonLink"
                        to="/profile"
                      >
                        <LinkAnchor
                          data-testid="buttonLink"
                          href="/profile"
                          navigate={[Function]}
                        >
                          <a
                            data-testid="buttonLink"
                            href="/profile"
                            onClick={[Function]}
                          >
                            <div
                              className="_1lqJX _3ZftH _zeH0N undefined"
                              onClick={[Function]}
                              onKeyPress={[Function]}
                              style={
                                Object {
                                  "height": 40,
                                  "lineHeight": "40px",
                                  "paddingLeft": "20%",
                                }
                              }
                              tabIndex={-1}
                              title=""
                            >
                              <ForwardRef
                                className="icon-small"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="icon-small"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="icon-small"
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root icon-small"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef>
                              <span>
                                PROFILE
                              </span>
                            </div>
                          </a>
                        </LinkAnchor>
                      </Link>
                    </P>
                    <P
                      Icon={
                        Object {
                          "$$typeof": Symbol(react.memo),
                          "compare": null,
                          "displayName": "ExitToAppIcon",
                          "muiName": "SvgIcon",
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "render": [Function],
                          },
                        }
                      }
                      align="left"
                      key="buttonLogout"
                      label="LOGOUT"
                      onClick={[Function]}
                      style={
                        Object {
                          "paddingLeft": "20%",
                        }
                      }
                    >
                      <div
                        className="_1lqJX _3ZftH _zeH0N undefined"
                        onClick={[Function]}
                        onKeyPress={[Function]}
                        style={
                          Object {
                            "height": 40,
                            "lineHeight": "40px",
                            "paddingLeft": "20%",
                          }
                        }
                        tabIndex={-1}
                        title=""
                      >
                        <ForwardRef
                          className="icon-small"
                        >
                          <WithStyles(ForwardRef(SvgIcon))
                            className="icon-small"
                          >
                            <ForwardRef(SvgIcon)
                              className="icon-small"
                              classes={
                                Object {
                                  "colorAction": "MuiSvgIcon-colorAction",
                                  "colorDisabled": "MuiSvgIcon-colorDisabled",
                                  "colorError": "MuiSvgIcon-colorError",
                                  "colorPrimary": "MuiSvgIcon-colorPrimary",
                                  "colorSecondary": "MuiSvgIcon-colorSecondary",
                                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                  "root": "MuiSvgIcon-root",
                                }
                              }
                            >
                              <svg
                                aria-hidden={true}
                                className="MuiSvgIcon-root icon-small"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10.09 15.59L11.5 17l5-5-5-5-1.41 1.41L12.67 11H3v2h9.67l-2.58 2.59zM19 3H5c-1.11 0-2 .9-2 2v4h2V5h14v14H5v-4H3v4c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                />
                              </svg>
                            </ForwardRef(SvgIcon)>
                          </WithStyles(ForwardRef(SvgIcon))>
                        </ForwardRef>
                        <span>
                          LOGOUT
                        </span>
                      </div>
                    </P>
                  </div>
                </div>
              </Memo(Settings)>
            </header>
          </Memo(Header)>
        </ApolloProvider>
      </MockedProvider>
    </Router>
  </BrowserRouter>
</Wrapper>
`;
