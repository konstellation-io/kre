// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mongodb is a generated GoMock package.
package mongodb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMongoManager is a mock of MongoManager interface.
type MockMongoManager struct {
	ctrl     *gomock.Controller
	recorder *MockMongoManagerMockRecorder
}

// MockMongoManagerMockRecorder is the mock recorder for MockMongoManager.
type MockMongoManagerMockRecorder struct {
	mock *MockMongoManager
}

// NewMockMongoManager creates a new mock instance.
func NewMockMongoManager(ctrl *gomock.Controller) *MockMongoManager {
	mock := &MockMongoManager{ctrl: ctrl}
	mock.recorder = &MockMongoManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoManager) EXPECT() *MockMongoManagerMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockMongoManager) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockMongoManagerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMongoManager)(nil).Connect))
}

// Disconnect mocks base method.
func (m *MockMongoManager) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockMongoManagerMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockMongoManager)(nil).Disconnect))
}

// InsertMany mocks base method.
func (m *MockMongoManager) InsertMany(ctx context.Context, db, coll string, docs interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", ctx, db, coll, docs)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockMongoManagerMockRecorder) InsertMany(ctx, db, coll, docs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockMongoManager)(nil).InsertMany), ctx, db, coll, docs)
}

// InsertOne mocks base method.
func (m *MockMongoManager) InsertOne(ctx context.Context, db, coll string, doc interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", ctx, db, coll, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockMongoManagerMockRecorder) InsertOne(ctx, db, coll, doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockMongoManager)(nil).InsertOne), ctx, db, coll, doc)
}

// TotalInserts mocks base method.
func (m *MockMongoManager) TotalInserts() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalInserts")
	ret0, _ := ret[0].(int64)
	return ret0
}

// TotalInserts indicates an expected call of TotalInserts.
func (mr *MockMongoManagerMockRecorder) TotalInserts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalInserts", reflect.TypeOf((*MockMongoManager)(nil).TotalInserts))
}
