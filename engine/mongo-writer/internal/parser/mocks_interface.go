// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package parser is a generated GoMock package.
package parser

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFluentbitMsgParser is a mock of FluentbitMsgParser interface.
type MockFluentbitMsgParser struct {
	ctrl     *gomock.Controller
	recorder *MockFluentbitMsgParserMockRecorder
}

// MockFluentbitMsgParserMockRecorder is the mock recorder for MockFluentbitMsgParser.
type MockFluentbitMsgParserMockRecorder struct {
	mock *MockFluentbitMsgParser
}

// NewMockFluentbitMsgParser creates a new mock instance.
func NewMockFluentbitMsgParser(ctrl *gomock.Controller) *MockFluentbitMsgParser {
	mock := &MockFluentbitMsgParser{ctrl: ctrl}
	mock.recorder = &MockFluentbitMsgParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFluentbitMsgParser) EXPECT() *MockFluentbitMsgParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockFluentbitMsgParser) Parse(data []byte) ([]LogMsg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", data)
	ret0, _ := ret[0].([]LogMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockFluentbitMsgParserMockRecorder) Parse(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockFluentbitMsgParser)(nil).Parse), data)
}
