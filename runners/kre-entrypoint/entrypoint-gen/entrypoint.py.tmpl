from grpclib.exceptions import GRPCError
from grpclib.const import Status
from grpclib.server import Stream

from kre_grpc import EntrypointKRE

from public_input_grpc import EntrypointBase
import public_input_pb2

class Entrypoint(EntrypointBase, EntrypointKRE):
    def __init__(self, logger, nc, subjects, config):
        logger.info(f"Entrypoint for '{config.krt_version}' initialized. ")
        EntrypointKRE.__init__(self, logger, nc, subjects, config)

    {{ range .Methods }}
    async def {{ .Name }}(self, stream: Stream[public_input_pb2.{{ .RequestType }}, public_input_pb2.{{ .ReturnsType }}]) -> None:
        return await self.process_message(stream, "{{ .Name }}")
    {{ end }}

    def make_response_object(self, subject, kre_nats_msg):
        {{- range .Methods }}
        if subject == '{{ .Name }}':
            self.logger.info(f"call to {{ .Name }}({{ .RequestType }})"
                             f" responses with '{{ .ReturnsType }}'. Data: {kre_nats_msg.data}")

            if kre_nats_msg.error:
                raise GRPCError(Status.INTERNAL, kre_nats_msg.error)
            else:
                return public_input_pb2.{{ .ReturnsType }}(**kre_nats_msg.data)
        {{ end }}
        raise Exception(f"unable to create a response from unknown subject '{subject}' ")
