import json
import os

from grpclib.reflection.service import ServerReflection
from grpclib.server import Server
from grpclib.utils import graceful_exit

# This entrypoint file is autogenerated from a proto file
from entrypoint import Entrypoint
from kre_runner import Runner


class Config:
    def __init__(self):
        # Mandatory variables
        try:
            self.krt_version_id = os.environ['KRT_VERSION_ID']
            self.krt_version = os.environ['KRT_VERSION']
            self.krt_node_name = os.environ['KRT_NODE_NAME']
            self.krt_node_id = os.environ['KRT_NODE_ID']
            self.nats_server = os.environ['KRT_NATS_SERVER']
            self.nats_subjects_file = os.environ['KRT_NATS_SUBJECTS_FILE']
        except Exception as err:
            raise Exception(f"error reading config: the {str(err)} env var is missing")


class EntrypointRunner(Runner):
    def __init__(self, host: str = '0.0.0.0', port: int = 9000):
        Runner.__init__(self, "entrypoint", Config())
        self.host = host
        self.port = port

    async def process_messages(self):
        with open(self.config.nats_subjects_file) as json_file:
            subjects = json.load(json_file)
            self.logger.info(f"Loaded NATS subject file: {subjects}")

        self.logger.info(f"Creating entrypoint service")
        entrypoint = Entrypoint(self.logger, self.nc, subjects)

        services = ServerReflection.extend([entrypoint])

        server = Server(services)
        with graceful_exit([server]):
            await server.start(self.host, self.port)
            self.logger.info(f'Serving gPRC server on {self.host}:{self.port}')
            await server.wait_closed()


if __name__ == '__main__':
    runner = EntrypointRunner()
    runner.start()
