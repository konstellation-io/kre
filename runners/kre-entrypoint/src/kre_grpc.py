import abc
import datetime
import time
import traceback

from grpclib import GRPCError
from protobuf_to_dict import protobuf_to_dict

from kre_nats import KreNatsMessage
from kre_measurements import KreMeasurements


# NOTE: EntrypointKRE will be extended by Entrypoint class auto-generated
class EntrypointKRE:
    def __init__(self, logger, nc, subjects, config):
        self.logger = logger
        self.subjects = subjects
        self.nc = nc
        self.config = config
        self.measurements = KreMeasurements(config.influx_uri)

    @abc.abstractmethod
    async def make_response_object(self, subject, response):
        # To be implemented on autogenerated entrypoint
        pass

    async def process_message(self, stream, subject) -> None:
        start = time.time()
        raw_msg = await stream.recv_message()
        assert raw_msg is not None
        try:
            request_dict = protobuf_to_dict(raw_msg)

            self.logger.info(f'gRPC message received')
            request_msg = KreNatsMessage(data=request_dict)

            nats_subject = self.subjects[subject]
            self.logger.info(f"Starting request/reply on NATS subject: '{nats_subject}'")

            nats_reply = await self.nc.request(nats_subject, request_msg.marshal(),
                                               timeout=self.config.request_timeout)

            self.logger.info(f"creating a response from message reply")
            response_msg = KreNatsMessage(msg=nats_reply)

            if response_msg.error:
                self.logger.error(f"received message: {response_msg}")

            response = self.make_response_object(subject, response_msg)

            await stream.send_message(response)

            self.logger.info(f'gRPC successfully response')

            end = time.time()
            elapsed = end - start

            self.logger.debug(f"version[{self.config.krt_version}] "
                              f"node[{self.config.krt_node_name}] "
                              f"reply[{nats_reply.subject}] "
                              f"start[{datetime.datetime.utcfromtimestamp(start).isoformat()}] "
                              f"end[{datetime.datetime.utcfromtimestamp(end).isoformat()}] "
                              f"elapsed[{round(elapsed, 2)}]"
                              )

            # Save the elapsed time measurement
            fields = {"elapsed": elapsed}
            tags = {
                "version": self.config.krt_version,
            }
            self.measurements.save("entrypoint_elapsed_time", fields, tags)

        except Exception as err:
            err_msg = f'Exception on gRPC call : {err})'
            self.logger.error(err_msg)
            traceback.print_exc()

            if isinstance(err, GRPCError):
                raise err
