// Code generated by MockGen. DO NOT EDIT.
// Source: user_activity.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kre/admin-api/domain/entity"
	reflect "reflect"
)

// MockUserActivityRepo is a mock of UserActivityRepo interface
type MockUserActivityRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserActivityRepoMockRecorder
}

// MockUserActivityRepoMockRecorder is the mock recorder for MockUserActivityRepo
type MockUserActivityRepoMockRecorder struct {
	mock *MockUserActivityRepo
}

// NewMockUserActivityRepo creates a new mock instance
func NewMockUserActivityRepo(ctrl *gomock.Controller) *MockUserActivityRepo {
	mock := &MockUserActivityRepo{ctrl: ctrl}
	mock.recorder = &MockUserActivityRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserActivityRepo) EXPECT() *MockUserActivityRepoMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserActivityRepo) Create(activity entity.UserActivity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", activity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUserActivityRepoMockRecorder) Create(activity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserActivityRepo)(nil).Create), activity)
}

// Get mocks base method
func (m *MockUserActivityRepo) Get(userEmail, activityType, fromDate, toDate, lastID *string) ([]*entity.UserActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userEmail, activityType, fromDate, toDate, lastID)
	ret0, _ := ret[0].([]*entity.UserActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUserActivityRepoMockRecorder) Get(userEmail, activityType, fromDate, toDate, lastID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserActivityRepo)(nil).Get), userEmail, activityType, fromDate, toDate, lastID)
}
