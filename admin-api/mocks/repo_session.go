// Code generated by MockGen. DO NOT EDIT.
// Source: session.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	entity "gitlab.com/konstellation/kre/admin-api/domain/entity"
	reflect "reflect"
)

// MockSessionRepo is a mock of SessionRepo interface
type MockSessionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepoMockRecorder
}

// MockSessionRepoMockRecorder is the mock recorder for MockSessionRepo
type MockSessionRepoMockRecorder struct {
	mock *MockSessionRepo
}

// NewMockSessionRepo creates a new mock instance
func NewMockSessionRepo(ctrl *gomock.Controller) *MockSessionRepo {
	mock := &MockSessionRepo{ctrl: ctrl}
	mock.recorder = &MockSessionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionRepo) EXPECT() *MockSessionRepoMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSessionRepo) Create(session entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockSessionRepoMockRecorder) Create(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionRepo)(nil).Create), session)
}

// GetByToken mocks base method
func (m *MockSessionRepo) GetByToken(token string) (entity.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByToken", token)
	ret0, _ := ret[0].(entity.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByToken indicates an expected call of GetByToken
func (mr *MockSessionRepoMockRecorder) GetByToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByToken", reflect.TypeOf((*MockSessionRepo)(nil).GetByToken), token)
}

// DeleteByToken mocks base method
func (m *MockSessionRepo) DeleteByToken(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByToken", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByToken indicates an expected call of DeleteByToken
func (mr *MockSessionRepoMockRecorder) DeleteByToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByToken", reflect.TypeOf((*MockSessionRepo)(nil).DeleteByToken), token)
}

// DeleteByUserIDs mocks base method
func (m *MockSessionRepo) DeleteByUserIDs(userIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserIDs", userIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserIDs indicates an expected call of DeleteByUserIDs
func (mr *MockSessionRepoMockRecorder) DeleteByUserIDs(userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIDs", reflect.TypeOf((*MockSessionRepo)(nil).DeleteByUserIDs), userIDs)
}
