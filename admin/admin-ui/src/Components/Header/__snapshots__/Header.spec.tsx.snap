// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header matches snapshot 1`] = `
<Wrapper
  mocks={
    Array [
      Object {
        "request": Object {
          "query": Object {
            "definitions": Array [
              Object {
                "directives": Array [],
                "kind": "OperationDefinition",
                "name": Object {
                  "kind": "Name",
                  "value": "GetMe",
                },
                "operation": "query",
                "selectionSet": Object {
                  "kind": "SelectionSet",
                  "selections": Array [
                    Object {
                      "arguments": Array [],
                      "directives": Array [],
                      "kind": "Field",
                      "name": Object {
                        "kind": "Name",
                        "value": "me",
                      },
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "id",
                            },
                          },
                          Object {
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "email",
                            },
                          },
                          Object {
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "accessLevel",
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
                "variableDefinitions": Array [],
              },
            ],
            "kind": "Document",
            "loc": Object {
              "end": 60,
              "source": Object {
                "body": "query GetMe {
  me {
    id
    email
    accessLevel
  }
}
",
                "locationOffset": Object {
                  "column": 1,
                  "line": 1,
                },
                "name": "GraphQL request",
              },
              "start": 0,
            },
          },
        },
        "result": Object {
          "data": Object {
            "me": Object {
              "accessLevel": "ADMIN",
              "email": "user@konstellation.com",
              "id": "someId",
            },
          },
        },
      },
    ]
  }
>
  <MockedProvider
    addTypename={false}
    mocks={
      Array [
        Object {
          "request": Object {
            "query": Object {
              "definitions": Array [
                Object {
                  "directives": Array [],
                  "kind": "OperationDefinition",
                  "name": Object {
                    "kind": "Name",
                    "value": "GetMe",
                  },
                  "operation": "query",
                  "selectionSet": Object {
                    "kind": "SelectionSet",
                    "selections": Array [
                      Object {
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "me",
                        },
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "id",
                              },
                            },
                            Object {
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "email",
                              },
                            },
                            Object {
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "accessLevel",
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  "variableDefinitions": Array [],
                },
              ],
              "kind": "Document",
              "loc": Object {
                "end": 60,
                "source": Object {
                  "body": "query GetMe {
  me {
    id
    email
    accessLevel
  }
}
",
                  "locationOffset": Object {
                    "column": 1,
                    "line": 1,
                  },
                  "name": "GraphQL request",
                },
                "start": 0,
              },
            },
          },
          "result": Object {
            "data": Object {
              "me": Object {
                "accessLevel": "ADMIN",
                "email": "user@konstellation.com",
                "id": "someId",
              },
            },
          },
        },
      ]
    }
  >
    <ApolloProvider
      client={
        ApolloClient {
          "cache": InMemoryCache {
            "addTypename": false,
            "config": Object {
              "addTypename": false,
              "dataIdFromObject": [Function],
              "resultCaching": true,
              "typePolicies": Object {},
            },
            "data": Root {
              "canRead": [Function],
              "data": Object {
                "ROOT_QUERY": Object {
                  "__typename": "Query",
                  "me": Object {
                    "accessLevel": "ADMIN",
                    "email": "user@konstellation.com",
                    "id": "someId",
                  },
                },
              },
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weak": WeakMap {},
                  "weakness": true,
                },
              },
              "policies": Policies {
                "cache": [Circular],
                "config": Object {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": Object {},
                },
                "rootIdsByTypename": Object {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": Object {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "storageTrie": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "typePolicies": Object {},
                "usingPossibleTypes": false,
              },
              "refs": Object {},
              "rootIds": Object {
                "ROOT_QUERY": 1,
              },
              "sharedLayerGroup": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "toReference": [Function],
            },
            "getFragmentDoc": [Function],
            "makeVar": [Function],
            "maybeBroadcastWatch": [Function],
            "optimisticData": Root {
              "canRead": [Function],
              "data": Object {
                "ROOT_QUERY": Object {
                  "__typename": "Query",
                  "me": Object {
                    "accessLevel": "ADMIN",
                    "email": "user@konstellation.com",
                    "id": "someId",
                  },
                },
              },
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weak": WeakMap {},
                  "weakness": true,
                },
              },
              "policies": Policies {
                "cache": [Circular],
                "config": Object {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": Object {},
                },
                "rootIdsByTypename": Object {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": Object {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "storageTrie": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "typePolicies": Object {},
                "usingPossibleTypes": false,
              },
              "refs": Object {},
              "rootIds": Object {
                "ROOT_QUERY": 1,
              },
              "sharedLayerGroup": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "toReference": [Function],
            },
            "policies": Policies {
              "cache": [Circular],
              "config": Object {
                "cache": [Circular],
                "dataIdFromObject": [Function],
                "possibleTypes": undefined,
                "typePolicies": Object {},
              },
              "rootIdsByTypename": Object {
                "Mutation": "ROOT_MUTATION",
                "Query": "ROOT_QUERY",
                "Subscription": "ROOT_SUBSCRIPTION",
              },
              "rootTypenamesById": Object {
                "ROOT_MUTATION": "Mutation",
                "ROOT_QUERY": "Query",
                "ROOT_SUBSCRIPTION": "Subscription",
              },
              "storageTrie": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
              "typePolicies": Object {},
              "usingPossibleTypes": false,
            },
            "storeReader": StoreReader {
              "config": Object {
                "addTypename": false,
                "cache": [Circular],
              },
              "executeSelectionSet": [Function],
              "executeSubSelectedArray": [Function],
              "knownResults": WeakMap {},
            },
            "storeWriter": StoreWriter {
              "cache": [Circular],
              "reader": StoreReader {
                "config": Object {
                  "addTypename": false,
                  "cache": [Circular],
                },
                "executeSelectionSet": [Function],
                "executeSubSelectedArray": [Function],
                "knownResults": WeakMap {},
              },
            },
            "txCount": 0,
            "typenameDocumentCache": Map {},
            "watchDep": [Function],
            "watches": Set {
              Object {
                "callback": [Function],
                "optimistic": true,
                "query": Object {
                  "definitions": Array [
                    Object {
                      "directives": Array [],
                      "kind": "OperationDefinition",
                      "name": Object {
                        "kind": "Name",
                        "value": "GetMe",
                      },
                      "operation": "query",
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "me",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "id",
                                  },
                                },
                                Object {
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "email",
                                  },
                                },
                                Object {
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "accessLevel",
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                      "variableDefinitions": Array [],
                    },
                  ],
                  "kind": "Document",
                  "loc": Object {
                    "end": 60,
                    "source": Object {
                      "body": "query GetMe {
  me {
    id
    email
    accessLevel
  }
}
",
                      "locationOffset": Object {
                        "column": 1,
                        "line": 1,
                      },
                      "name": "GraphQL request",
                    },
                    "start": 0,
                  },
                },
                "variables": Object {},
              },
            },
          },
          "clearStoreCallbacks": Array [],
          "defaultOptions": Object {},
          "disableNetworkFetches": false,
          "link": MockLink {
            "addTypename": false,
            "mockedResponsesByKey": Object {
              "{\\"query\\":\\"query GetMe {\\\\n  me {\\\\n    id\\\\n    email\\\\n    accessLevel\\\\n  }\\\\n}\\\\n\\"}": Array [],
            },
            "operation": Object {
              "extensions": Object {},
              "operationName": "GetMe",
              "query": Object {
                "definitions": Array [
                  Object {
                    "directives": Array [],
                    "kind": "OperationDefinition",
                    "name": Object {
                      "kind": "Name",
                      "value": "GetMe",
                    },
                    "operation": "query",
                    "selectionSet": Object {
                      "kind": "SelectionSet",
                      "selections": Array [
                        Object {
                          "arguments": Array [],
                          "directives": Array [],
                          "kind": "Field",
                          "name": Object {
                            "kind": "Name",
                            "value": "me",
                          },
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "id",
                                },
                              },
                              Object {
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "email",
                                },
                              },
                              Object {
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "accessLevel",
                                },
                              },
                            ],
                          },
                        },
                      ],
                    },
                    "variableDefinitions": Array [],
                  },
                ],
                "kind": "Document",
                "loc": Object {
                  "end": 60,
                  "source": Object {
                    "body": "query GetMe {
  me {
    id
    email
    accessLevel
  }
}
",
                    "locationOffset": Object {
                      "column": 1,
                      "line": 1,
                    },
                    "name": "GraphQL request",
                  },
                  "start": 0,
                },
              },
              "variables": Object {},
            },
          },
          "localState": LocalState {
            "cache": InMemoryCache {
              "addTypename": false,
              "config": Object {
                "addTypename": false,
                "dataIdFromObject": [Function],
                "resultCaching": true,
                "typePolicies": Object {},
              },
              "data": Root {
                "canRead": [Function],
                "data": Object {
                  "ROOT_QUERY": Object {
                    "__typename": "Query",
                    "me": Object {
                      "accessLevel": "ADMIN",
                      "email": "user@konstellation.com",
                      "id": "someId",
                    },
                  },
                },
                "getFieldValue": [Function],
                "group": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weak": WeakMap {},
                    "weakness": true,
                  },
                },
                "policies": Policies {
                  "cache": [Circular],
                  "config": Object {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": Object {},
                  },
                  "rootIdsByTypename": Object {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": Object {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "storageTrie": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "typePolicies": Object {},
                  "usingPossibleTypes": false,
                },
                "refs": Object {},
                "rootIds": Object {
                  "ROOT_QUERY": 1,
                },
                "sharedLayerGroup": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                },
                "toReference": [Function],
              },
              "getFragmentDoc": [Function],
              "makeVar": [Function],
              "maybeBroadcastWatch": [Function],
              "optimisticData": Root {
                "canRead": [Function],
                "data": Object {
                  "ROOT_QUERY": Object {
                    "__typename": "Query",
                    "me": Object {
                      "accessLevel": "ADMIN",
                      "email": "user@konstellation.com",
                      "id": "someId",
                    },
                  },
                },
                "getFieldValue": [Function],
                "group": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weak": WeakMap {},
                    "weakness": true,
                  },
                },
                "policies": Policies {
                  "cache": [Circular],
                  "config": Object {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": Object {},
                  },
                  "rootIdsByTypename": Object {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": Object {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "storageTrie": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "typePolicies": Object {},
                  "usingPossibleTypes": false,
                },
                "refs": Object {},
                "rootIds": Object {
                  "ROOT_QUERY": 1,
                },
                "sharedLayerGroup": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                },
                "toReference": [Function],
              },
              "policies": Policies {
                "cache": [Circular],
                "config": Object {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": Object {},
                },
                "rootIdsByTypename": Object {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": Object {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "storageTrie": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "typePolicies": Object {},
                "usingPossibleTypes": false,
              },
              "storeReader": StoreReader {
                "config": Object {
                  "addTypename": false,
                  "cache": [Circular],
                },
                "executeSelectionSet": [Function],
                "executeSubSelectedArray": [Function],
                "knownResults": WeakMap {},
              },
              "storeWriter": StoreWriter {
                "cache": [Circular],
                "reader": StoreReader {
                  "config": Object {
                    "addTypename": false,
                    "cache": [Circular],
                  },
                  "executeSelectionSet": [Function],
                  "executeSubSelectedArray": [Function],
                  "knownResults": WeakMap {},
                },
              },
              "txCount": 0,
              "typenameDocumentCache": Map {},
              "watchDep": [Function],
              "watches": Set {
                Object {
                  "callback": [Function],
                  "optimistic": true,
                  "query": Object {
                    "definitions": Array [
                      Object {
                        "directives": Array [],
                        "kind": "OperationDefinition",
                        "name": Object {
                          "kind": "Name",
                          "value": "GetMe",
                        },
                        "operation": "query",
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "me",
                              },
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "id",
                                    },
                                  },
                                  Object {
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "email",
                                    },
                                  },
                                  Object {
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "accessLevel",
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                        "variableDefinitions": Array [],
                      },
                    ],
                    "kind": "Document",
                    "loc": Object {
                      "end": 60,
                      "source": Object {
                        "body": "query GetMe {
  me {
    id
    email
    accessLevel
  }
}
",
                        "locationOffset": Object {
                          "column": 1,
                          "line": 1,
                        },
                        "name": "GraphQL request",
                      },
                      "start": 0,
                    },
                  },
                  "variables": Object {},
                },
              },
            },
            "client": [Circular],
          },
          "mutate": [Function],
          "query": [Function],
          "queryDeduplication": true,
          "queryManager": QueryManager {
            "assumeImmutableResults": false,
            "cache": InMemoryCache {
              "addTypename": false,
              "config": Object {
                "addTypename": false,
                "dataIdFromObject": [Function],
                "resultCaching": true,
                "typePolicies": Object {},
              },
              "data": Root {
                "canRead": [Function],
                "data": Object {
                  "ROOT_QUERY": Object {
                    "__typename": "Query",
                    "me": Object {
                      "accessLevel": "ADMIN",
                      "email": "user@konstellation.com",
                      "id": "someId",
                    },
                  },
                },
                "getFieldValue": [Function],
                "group": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weak": WeakMap {},
                    "weakness": true,
                  },
                },
                "policies": Policies {
                  "cache": [Circular],
                  "config": Object {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": Object {},
                  },
                  "rootIdsByTypename": Object {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": Object {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "storageTrie": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "typePolicies": Object {},
                  "usingPossibleTypes": false,
                },
                "refs": Object {},
                "rootIds": Object {
                  "ROOT_QUERY": 1,
                },
                "sharedLayerGroup": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                },
                "toReference": [Function],
              },
              "getFragmentDoc": [Function],
              "makeVar": [Function],
              "maybeBroadcastWatch": [Function],
              "optimisticData": Root {
                "canRead": [Function],
                "data": Object {
                  "ROOT_QUERY": Object {
                    "__typename": "Query",
                    "me": Object {
                      "accessLevel": "ADMIN",
                      "email": "user@konstellation.com",
                      "id": "someId",
                    },
                  },
                },
                "getFieldValue": [Function],
                "group": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weak": WeakMap {},
                    "weakness": true,
                  },
                },
                "policies": Policies {
                  "cache": [Circular],
                  "config": Object {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": Object {},
                  },
                  "rootIdsByTypename": Object {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": Object {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "storageTrie": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "typePolicies": Object {},
                  "usingPossibleTypes": false,
                },
                "refs": Object {},
                "rootIds": Object {
                  "ROOT_QUERY": 1,
                },
                "sharedLayerGroup": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                },
                "toReference": [Function],
              },
              "policies": Policies {
                "cache": [Circular],
                "config": Object {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": Object {},
                },
                "rootIdsByTypename": Object {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": Object {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "storageTrie": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "typePolicies": Object {},
                "usingPossibleTypes": false,
              },
              "storeReader": StoreReader {
                "config": Object {
                  "addTypename": false,
                  "cache": [Circular],
                },
                "executeSelectionSet": [Function],
                "executeSubSelectedArray": [Function],
                "knownResults": WeakMap {},
              },
              "storeWriter": StoreWriter {
                "cache": [Circular],
                "reader": StoreReader {
                  "config": Object {
                    "addTypename": false,
                    "cache": [Circular],
                  },
                  "executeSelectionSet": [Function],
                  "executeSubSelectedArray": [Function],
                  "knownResults": WeakMap {},
                },
              },
              "txCount": 0,
              "typenameDocumentCache": Map {},
              "watchDep": [Function],
              "watches": Set {
                Object {
                  "callback": [Function],
                  "optimistic": true,
                  "query": Object {
                    "definitions": Array [
                      Object {
                        "directives": Array [],
                        "kind": "OperationDefinition",
                        "name": Object {
                          "kind": "Name",
                          "value": "GetMe",
                        },
                        "operation": "query",
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "me",
                              },
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "id",
                                    },
                                  },
                                  Object {
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "email",
                                    },
                                  },
                                  Object {
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "accessLevel",
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                        "variableDefinitions": Array [],
                      },
                    ],
                    "kind": "Document",
                    "loc": Object {
                      "end": 60,
                      "source": Object {
                        "body": "query GetMe {
  me {
    id
    email
    accessLevel
  }
}
",
                        "locationOffset": Object {
                          "column": 1,
                          "line": 1,
                        },
                        "name": "GraphQL request",
                      },
                      "start": 0,
                    },
                  },
                  "variables": Object {},
                },
              },
            },
            "clientAwareness": Object {
              "name": undefined,
              "version": undefined,
            },
            "fetchCancelFns": Map {},
            "inFlightLinkObservables": Map {},
            "link": MockLink {
              "addTypename": false,
              "mockedResponsesByKey": Object {
                "{\\"query\\":\\"query GetMe {\\\\n  me {\\\\n    id\\\\n    email\\\\n    accessLevel\\\\n  }\\\\n}\\\\n\\"}": Array [],
              },
              "operation": Object {
                "extensions": Object {},
                "operationName": "GetMe",
                "query": Object {
                  "definitions": Array [
                    Object {
                      "directives": Array [],
                      "kind": "OperationDefinition",
                      "name": Object {
                        "kind": "Name",
                        "value": "GetMe",
                      },
                      "operation": "query",
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "me",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "id",
                                  },
                                },
                                Object {
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "email",
                                  },
                                },
                                Object {
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "accessLevel",
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                      "variableDefinitions": Array [],
                    },
                  ],
                  "kind": "Document",
                  "loc": Object {
                    "end": 60,
                    "source": Object {
                      "body": "query GetMe {
  me {
    id
    email
    accessLevel
  }
}
",
                      "locationOffset": Object {
                        "column": 1,
                        "line": 1,
                      },
                      "name": "GraphQL request",
                    },
                    "start": 0,
                  },
                },
                "variables": Object {},
              },
            },
            "localState": LocalState {
              "cache": InMemoryCache {
                "addTypename": false,
                "config": Object {
                  "addTypename": false,
                  "dataIdFromObject": [Function],
                  "resultCaching": true,
                  "typePolicies": Object {},
                },
                "data": Root {
                  "canRead": [Function],
                  "data": Object {
                    "ROOT_QUERY": Object {
                      "__typename": "Query",
                      "me": Object {
                        "accessLevel": "ADMIN",
                        "email": "user@konstellation.com",
                        "id": "someId",
                      },
                    },
                  },
                  "getFieldValue": [Function],
                  "group": CacheGroup {
                    "caching": true,
                    "d": [Function],
                    "keyMaker": KeyTrie {
                      "makeData": [Function],
                      "weak": WeakMap {},
                      "weakness": true,
                    },
                  },
                  "policies": Policies {
                    "cache": [Circular],
                    "config": Object {
                      "cache": [Circular],
                      "dataIdFromObject": [Function],
                      "possibleTypes": undefined,
                      "typePolicies": Object {},
                    },
                    "rootIdsByTypename": Object {
                      "Mutation": "ROOT_MUTATION",
                      "Query": "ROOT_QUERY",
                      "Subscription": "ROOT_SUBSCRIPTION",
                    },
                    "rootTypenamesById": Object {
                      "ROOT_MUTATION": "Mutation",
                      "ROOT_QUERY": "Query",
                      "ROOT_SUBSCRIPTION": "Subscription",
                    },
                    "storageTrie": KeyTrie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "typePolicies": Object {},
                    "usingPossibleTypes": false,
                  },
                  "refs": Object {},
                  "rootIds": Object {
                    "ROOT_QUERY": 1,
                  },
                  "sharedLayerGroup": CacheGroup {
                    "caching": true,
                    "d": [Function],
                    "keyMaker": KeyTrie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                  },
                  "toReference": [Function],
                },
                "getFragmentDoc": [Function],
                "makeVar": [Function],
                "maybeBroadcastWatch": [Function],
                "optimisticData": Root {
                  "canRead": [Function],
                  "data": Object {
                    "ROOT_QUERY": Object {
                      "__typename": "Query",
                      "me": Object {
                        "accessLevel": "ADMIN",
                        "email": "user@konstellation.com",
                        "id": "someId",
                      },
                    },
                  },
                  "getFieldValue": [Function],
                  "group": CacheGroup {
                    "caching": true,
                    "d": [Function],
                    "keyMaker": KeyTrie {
                      "makeData": [Function],
                      "weak": WeakMap {},
                      "weakness": true,
                    },
                  },
                  "policies": Policies {
                    "cache": [Circular],
                    "config": Object {
                      "cache": [Circular],
                      "dataIdFromObject": [Function],
                      "possibleTypes": undefined,
                      "typePolicies": Object {},
                    },
                    "rootIdsByTypename": Object {
                      "Mutation": "ROOT_MUTATION",
                      "Query": "ROOT_QUERY",
                      "Subscription": "ROOT_SUBSCRIPTION",
                    },
                    "rootTypenamesById": Object {
                      "ROOT_MUTATION": "Mutation",
                      "ROOT_QUERY": "Query",
                      "ROOT_SUBSCRIPTION": "Subscription",
                    },
                    "storageTrie": KeyTrie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "typePolicies": Object {},
                    "usingPossibleTypes": false,
                  },
                  "refs": Object {},
                  "rootIds": Object {
                    "ROOT_QUERY": 1,
                  },
                  "sharedLayerGroup": CacheGroup {
                    "caching": true,
                    "d": [Function],
                    "keyMaker": KeyTrie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                  },
                  "toReference": [Function],
                },
                "policies": Policies {
                  "cache": [Circular],
                  "config": Object {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": Object {},
                  },
                  "rootIdsByTypename": Object {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": Object {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "storageTrie": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "typePolicies": Object {},
                  "usingPossibleTypes": false,
                },
                "storeReader": StoreReader {
                  "config": Object {
                    "addTypename": false,
                    "cache": [Circular],
                  },
                  "executeSelectionSet": [Function],
                  "executeSubSelectedArray": [Function],
                  "knownResults": WeakMap {},
                },
                "storeWriter": StoreWriter {
                  "cache": [Circular],
                  "reader": StoreReader {
                    "config": Object {
                      "addTypename": false,
                      "cache": [Circular],
                    },
                    "executeSelectionSet": [Function],
                    "executeSubSelectedArray": [Function],
                    "knownResults": WeakMap {},
                  },
                },
                "txCount": 0,
                "typenameDocumentCache": Map {},
                "watchDep": [Function],
                "watches": Set {
                  Object {
                    "callback": [Function],
                    "optimistic": true,
                    "query": Object {
                      "definitions": Array [
                        Object {
                          "directives": Array [],
                          "kind": "OperationDefinition",
                          "name": Object {
                            "kind": "Name",
                            "value": "GetMe",
                          },
                          "operation": "query",
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "me",
                                },
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "id",
                                      },
                                    },
                                    Object {
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "email",
                                      },
                                    },
                                    Object {
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "accessLevel",
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          "variableDefinitions": Array [],
                        },
                      ],
                      "kind": "Document",
                      "loc": Object {
                        "end": 60,
                        "source": Object {
                          "body": "query GetMe {
  me {
    id
    email
    accessLevel
  }
}
",
                          "locationOffset": Object {
                            "column": 1,
                            "line": 1,
                          },
                          "name": "GraphQL request",
                        },
                        "start": 0,
                      },
                    },
                    "variables": Object {},
                  },
                },
              },
              "client": [Circular],
            },
            "mutationIdCounter": 1,
            "mutationStore": MutationStore {
              "store": Object {},
            },
            "onBroadcast": [Function],
            "queries": Map {
              "1" => QueryInfo {
                "cache": InMemoryCache {
                  "addTypename": false,
                  "config": Object {
                    "addTypename": false,
                    "dataIdFromObject": [Function],
                    "resultCaching": true,
                    "typePolicies": Object {},
                  },
                  "data": Root {
                    "canRead": [Function],
                    "data": Object {
                      "ROOT_QUERY": Object {
                        "__typename": "Query",
                        "me": Object {
                          "accessLevel": "ADMIN",
                          "email": "user@konstellation.com",
                          "id": "someId",
                        },
                      },
                    },
                    "getFieldValue": [Function],
                    "group": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": KeyTrie {
                        "makeData": [Function],
                        "weak": WeakMap {},
                        "weakness": true,
                      },
                    },
                    "policies": Policies {
                      "cache": [Circular],
                      "config": Object {
                        "cache": [Circular],
                        "dataIdFromObject": [Function],
                        "possibleTypes": undefined,
                        "typePolicies": Object {},
                      },
                      "rootIdsByTypename": Object {
                        "Mutation": "ROOT_MUTATION",
                        "Query": "ROOT_QUERY",
                        "Subscription": "ROOT_SUBSCRIPTION",
                      },
                      "rootTypenamesById": Object {
                        "ROOT_MUTATION": "Mutation",
                        "ROOT_QUERY": "Query",
                        "ROOT_SUBSCRIPTION": "Subscription",
                      },
                      "storageTrie": KeyTrie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "typePolicies": Object {},
                      "usingPossibleTypes": false,
                    },
                    "refs": Object {},
                    "rootIds": Object {
                      "ROOT_QUERY": 1,
                    },
                    "sharedLayerGroup": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": KeyTrie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                    },
                    "toReference": [Function],
                  },
                  "getFragmentDoc": [Function],
                  "makeVar": [Function],
                  "maybeBroadcastWatch": [Function],
                  "optimisticData": Root {
                    "canRead": [Function],
                    "data": Object {
                      "ROOT_QUERY": Object {
                        "__typename": "Query",
                        "me": Object {
                          "accessLevel": "ADMIN",
                          "email": "user@konstellation.com",
                          "id": "someId",
                        },
                      },
                    },
                    "getFieldValue": [Function],
                    "group": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": KeyTrie {
                        "makeData": [Function],
                        "weak": WeakMap {},
                        "weakness": true,
                      },
                    },
                    "policies": Policies {
                      "cache": [Circular],
                      "config": Object {
                        "cache": [Circular],
                        "dataIdFromObject": [Function],
                        "possibleTypes": undefined,
                        "typePolicies": Object {},
                      },
                      "rootIdsByTypename": Object {
                        "Mutation": "ROOT_MUTATION",
                        "Query": "ROOT_QUERY",
                        "Subscription": "ROOT_SUBSCRIPTION",
                      },
                      "rootTypenamesById": Object {
                        "ROOT_MUTATION": "Mutation",
                        "ROOT_QUERY": "Query",
                        "ROOT_SUBSCRIPTION": "Subscription",
                      },
                      "storageTrie": KeyTrie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "typePolicies": Object {},
                      "usingPossibleTypes": false,
                    },
                    "refs": Object {},
                    "rootIds": Object {
                      "ROOT_QUERY": 1,
                    },
                    "sharedLayerGroup": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": KeyTrie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                    },
                    "toReference": [Function],
                  },
                  "policies": Policies {
                    "cache": [Circular],
                    "config": Object {
                      "cache": [Circular],
                      "dataIdFromObject": [Function],
                      "possibleTypes": undefined,
                      "typePolicies": Object {},
                    },
                    "rootIdsByTypename": Object {
                      "Mutation": "ROOT_MUTATION",
                      "Query": "ROOT_QUERY",
                      "Subscription": "ROOT_SUBSCRIPTION",
                    },
                    "rootTypenamesById": Object {
                      "ROOT_MUTATION": "Mutation",
                      "ROOT_QUERY": "Query",
                      "ROOT_SUBSCRIPTION": "Subscription",
                    },
                    "storageTrie": KeyTrie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "typePolicies": Object {},
                    "usingPossibleTypes": false,
                  },
                  "storeReader": StoreReader {
                    "config": Object {
                      "addTypename": false,
                      "cache": [Circular],
                    },
                    "executeSelectionSet": [Function],
                    "executeSubSelectedArray": [Function],
                    "knownResults": WeakMap {},
                  },
                  "storeWriter": StoreWriter {
                    "cache": [Circular],
                    "reader": StoreReader {
                      "config": Object {
                        "addTypename": false,
                        "cache": [Circular],
                      },
                      "executeSelectionSet": [Function],
                      "executeSubSelectedArray": [Function],
                      "knownResults": WeakMap {},
                    },
                  },
                  "txCount": 0,
                  "typenameDocumentCache": Map {},
                  "watchDep": [Function],
                  "watches": Set {
                    Object {
                      "callback": [Function],
                      "optimistic": true,
                      "query": Object {
                        "definitions": Array [
                          Object {
                            "directives": Array [],
                            "kind": "OperationDefinition",
                            "name": Object {
                              "kind": "Name",
                              "value": "GetMe",
                            },
                            "operation": "query",
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "me",
                                  },
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "id",
                                        },
                                      },
                                      Object {
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "email",
                                        },
                                      },
                                      Object {
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "accessLevel",
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                            "variableDefinitions": Array [],
                          },
                        ],
                        "kind": "Document",
                        "loc": Object {
                          "end": 60,
                          "source": Object {
                            "body": "query GetMe {
  me {
    id
    email
    accessLevel
  }
}
",
                            "locationOffset": Object {
                              "column": 1,
                              "line": 1,
                            },
                            "name": "GraphQL request",
                          },
                          "start": 0,
                        },
                      },
                      "variables": Object {},
                    },
                  },
                },
                "cancel": [Function],
                "diff": Object {
                  "complete": true,
                  "missing": undefined,
                  "result": Object {
                    "me": Object {
                      "accessLevel": "ADMIN",
                      "email": "user@konstellation.com",
                      "id": "someId",
                    },
                  },
                },
                "dirty": false,
                "document": Object {
                  "definitions": Array [
                    Object {
                      "directives": Array [],
                      "kind": "OperationDefinition",
                      "name": Object {
                        "kind": "Name",
                        "value": "GetMe",
                      },
                      "operation": "query",
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "me",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "id",
                                  },
                                },
                                Object {
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "email",
                                  },
                                },
                                Object {
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "accessLevel",
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                      "variableDefinitions": Array [],
                    },
                  ],
                  "kind": "Document",
                  "loc": Object {
                    "end": 60,
                    "source": Object {
                      "body": "query GetMe {
  me {
    id
    email
    accessLevel
  }
}
",
                      "locationOffset": Object {
                        "column": 1,
                        "line": 1,
                      },
                      "name": "GraphQL request",
                    },
                    "start": 0,
                  },
                },
                "graphQLErrors": Array [],
                "lastRequestId": 1,
                "lastWatch": Object {
                  "callback": [Function],
                  "optimistic": true,
                  "query": Object {
                    "definitions": Array [
                      Object {
                        "directives": Array [],
                        "kind": "OperationDefinition",
                        "name": Object {
                          "kind": "Name",
                          "value": "GetMe",
                        },
                        "operation": "query",
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "me",
                              },
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "id",
                                    },
                                  },
                                  Object {
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "email",
                                    },
                                  },
                                  Object {
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "accessLevel",
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                        "variableDefinitions": Array [],
                      },
                    ],
                    "kind": "Document",
                    "loc": Object {
                      "end": 60,
                      "source": Object {
                        "body": "query GetMe {
  me {
    id
    email
    accessLevel
  }
}
",
                        "locationOffset": Object {
                          "column": 1,
                          "line": 1,
                        },
                        "name": "GraphQL request",
                      },
                      "start": 0,
                    },
                  },
                  "variables": Object {},
                },
                "lastWrittenResult": Object {
                  "data": Object {
                    "me": Object {
                      "accessLevel": "ADMIN",
                      "email": "user@konstellation.com",
                      "id": "someId",
                    },
                  },
                },
                "lastWrittenVars": Object {},
                "listeners": Set {
                  [Function],
                },
                "networkError": undefined,
                "networkStatus": 7,
                "observableQuery": ObservableQuery {
                  "_subscriber": [Function],
                  "isTornDown": false,
                  "lastResult": Object {
                    "data": Object {
                      "me": Object {
                        "accessLevel": "ADMIN",
                        "email": "user@konstellation.com",
                        "id": "someId",
                      },
                    },
                    "loading": false,
                    "networkStatus": 7,
                    "partial": false,
                  },
                  "lastResultSnapshot": Object {
                    "data": Object {
                      "me": Object {
                        "accessLevel": "ADMIN",
                        "email": "user@konstellation.com",
                        "id": "someId",
                      },
                    },
                    "loading": false,
                    "networkStatus": 7,
                    "partial": false,
                  },
                  "observer": Object {
                    "error": [Function],
                    "next": [Function],
                  },
                  "observers": Set {
                    SubscriptionObserver {
                      "_subscription": Subscription {
                        "_cleanup": [Function],
                        "_observer": Object {
                          "error": [Function],
                          "next": [Function],
                        },
                        "_queue": undefined,
                        "_state": "ready",
                      },
                    },
                  },
                  "options": Object {
                    "context": undefined,
                    "displayName": "Query",
                    "notifyOnNetworkStatusChange": false,
                    "query": Object {
                      "definitions": Array [
                        Object {
                          "directives": Array [],
                          "kind": "OperationDefinition",
                          "name": Object {
                            "kind": "Name",
                            "value": "GetMe",
                          },
                          "operation": "query",
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "me",
                                },
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "id",
                                      },
                                    },
                                    Object {
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "email",
                                      },
                                    },
                                    Object {
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "accessLevel",
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          "variableDefinitions": Array [],
                        },
                      ],
                      "kind": "Document",
                      "loc": Object {
                        "end": 60,
                        "source": Object {
                          "body": "query GetMe {
  me {
    id
    email
    accessLevel
  }
}
",
                          "locationOffset": Object {
                            "column": 1,
                            "line": 1,
                          },
                          "name": "GraphQL request",
                        },
                        "start": 0,
                      },
                    },
                    "variables": Object {},
                  },
                  "queryId": "1",
                  "queryInfo": [Circular],
                  "queryManager": [Circular],
                  "queryName": "GetMe",
                  "reobserver": Reobserver {
                    "concast": Concast {
                      "_subscriber": [Function],
                      "cancel": [Function],
                      "handlers": Object {
                        "complete": [Function],
                        "error": [Function],
                        "next": [Function],
                      },
                      "latest": Array [
                        "next",
                        Object {
                          "data": Object {
                            "me": Object {
                              "accessLevel": "ADMIN",
                              "email": "user@konstellation.com",
                              "id": "someId",
                            },
                          },
                          "loading": false,
                          "networkStatus": 7,
                        },
                      ],
                      "observers": Set {
                        Object {
                          "error": [Function],
                          "next": [Function],
                        },
                      },
                      "promise": Promise {},
                      "reject": [Function],
                      "resolve": [Function],
                      "sources": Array [],
                      "sub": null,
                    },
                    "fetch": [Function],
                    "observer": Object {
                      "error": [Function],
                      "next": [Function],
                    },
                    "options": Object {
                      "context": undefined,
                      "displayName": "Query",
                      "notifyOnNetworkStatusChange": false,
                      "query": Object {
                        "definitions": Array [
                          Object {
                            "directives": Array [],
                            "kind": "OperationDefinition",
                            "name": Object {
                              "kind": "Name",
                              "value": "GetMe",
                            },
                            "operation": "query",
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "me",
                                  },
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "id",
                                        },
                                      },
                                      Object {
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "email",
                                        },
                                      },
                                      Object {
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "accessLevel",
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                            "variableDefinitions": Array [],
                          },
                        ],
                        "kind": "Document",
                        "loc": Object {
                          "end": 60,
                          "source": Object {
                            "body": "query GetMe {
  me {
    id
    email
    accessLevel
  }
}
",
                            "locationOffset": Object {
                              "column": 1,
                              "line": 1,
                            },
                            "name": "GraphQL request",
                          },
                          "start": 0,
                        },
                      },
                      "variables": Object {},
                    },
                    "shouldFetch": [Function],
                  },
                  "subscriptions": Set {},
                },
                "oqListener": [Function],
                "subscriptions": Set {},
                "variables": Object {},
              },
            },
            "queryDeduplication": true,
            "queryIdCounter": 2,
            "requestIdCounter": 2,
            "ssrMode": false,
            "transformCache": WeakMap {},
          },
          "reFetchObservableQueries": [Function],
          "resetStore": [Function],
          "resetStoreCallbacks": Array [],
          "typeDefs": undefined,
          "version": "local",
          "watchQuery": [Function],
        }
      }
    >
      <Memo(Header)>
        <header
          className="container"
          data-testid="app-header"
        >
          <img
            alt="konstellation"
            className="konstellationText"
            src="/img/brand/konstellation.svg"
          />
          <div
            className="customHeaderElements"
          />
          <Memo(Settings)
            label="user@konstellation.com"
          >
            <div
              className="container"
              data-testid="settingsContainer"
              onClick={[Function]}
            >
              <div
                className="label"
                data-testid="settings-label"
              >
                user@konstellation.com
              </div>
              <div
                className="options"
                data-testid="settingsContent"
                style={
                  Object {
                    "maxHeight": 0,
                  }
                }
              >
                <A
                  Icon={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "displayName": "VerifiedUserIcon",
                      "muiName": "SvgIcon",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "render": [Function],
                      },
                    }
                  }
                  align="left"
                  key="buttonSettings"
                  label="SETTINGS"
                  style={
                    Object {
                      "paddingLeft": "20%",
                    }
                  }
                  to="/settings"
                >
                  <Link
                    data-testid="buttonLink"
                    to="/settings"
                  />
                </A>
                <A
                  Icon={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "displayName": "SupervisorAccountIcon",
                      "muiName": "SvgIcon",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "render": [Function],
                      },
                    }
                  }
                  align="left"
                  key="buttonAudit"
                  label="AUDIT"
                  style={
                    Object {
                      "paddingLeft": "20%",
                    }
                  }
                  to="/audit"
                >
                  <Link
                    data-testid="buttonLink"
                    to="/audit"
                  />
                </A>
                <A
                  Icon={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "displayName": "ExitToAppIcon",
                      "muiName": "SvgIcon",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "render": [Function],
                      },
                    }
                  }
                  align="left"
                  key="buttonLogout"
                  label="LOGOUT"
                  onClick={[Function]}
                  style={
                    Object {
                      "paddingLeft": "20%",
                    }
                  }
                >
                  <div
                    className="_1lqJX _3ZftH _zeH0N undefined"
                    onClick={[Function]}
                    onKeyPress={[Function]}
                    style={
                      Object {
                        "height": 40,
                        "lineHeight": "40px",
                        "paddingLeft": "20%",
                      }
                    }
                    tabIndex={-1}
                    title=""
                  >
                    <ForwardRef
                      className="icon-small"
                    >
                      <WithStyles(ForwardRef(SvgIcon))
                        className="icon-small"
                      >
                        <ForwardRef(SvgIcon)
                          className="icon-small"
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root icon-small"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M10.09 15.59L11.5 17l5-5-5-5-1.41 1.41L12.67 11H3v2h9.67l-2.58 2.59zM19 3H5c-1.11 0-2 .9-2 2v4h2V5h14v14H5v-4H3v4c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef>
                    <span>
                      LOGOUT
                    </span>
                  </div>
                </A>
              </div>
            </div>
          </Memo(Settings)>
        </header>
      </Memo(Header)>
    </ApolloProvider>
  </MockedProvider>
</Wrapper>
`;
