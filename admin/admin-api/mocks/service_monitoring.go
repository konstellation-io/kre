// Code generated by MockGen. DO NOT EDIT.
// Source: monitoring.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kre/admin/admin-api/domain/entity"
	reflect "reflect"
)

// MockMonitoringService is a mock of MonitoringService interface
type MockMonitoringService struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringServiceMockRecorder
}

// MockMonitoringServiceMockRecorder is the mock recorder for MockMonitoringService
type MockMonitoringServiceMockRecorder struct {
	mock *MockMonitoringService
}

// NewMockMonitoringService creates a new mock instance
func NewMockMonitoringService(ctrl *gomock.Controller) *MockMonitoringService {
	mock := &MockMonitoringService{ctrl: ctrl}
	mock.recorder = &MockMonitoringServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitoringService) EXPECT() *MockMonitoringServiceMockRecorder {
	return m.recorder
}

// NodeLogs mocks base method
func (m *MockMonitoringService) NodeLogs(ctx context.Context, runtime *entity.Runtime, versionID string, filters entity.LogFilters) (<-chan *entity.NodeLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeLogs", ctx, runtime, versionID, filters)
	ret0, _ := ret[0].(<-chan *entity.NodeLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeLogs indicates an expected call of NodeLogs
func (mr *MockMonitoringServiceMockRecorder) NodeLogs(ctx, runtime, versionID, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeLogs", reflect.TypeOf((*MockMonitoringService)(nil).NodeLogs), ctx, runtime, versionID, filters)
}

// WatchNodeStatus mocks base method
func (m *MockMonitoringService) WatchNodeStatus(ctx context.Context, runtime *entity.Runtime, versionName string) (<-chan *entity.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchNodeStatus", ctx, runtime, versionName)
	ret0, _ := ret[0].(<-chan *entity.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchNodeStatus indicates an expected call of WatchNodeStatus
func (mr *MockMonitoringServiceMockRecorder) WatchNodeStatus(ctx, runtime, versionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchNodeStatus", reflect.TypeOf((*MockMonitoringService)(nil).WatchNodeStatus), ctx, runtime, versionName)
}

// SearchLogs mocks base method
func (m *MockMonitoringService) SearchLogs(ctx context.Context, runtime *entity.Runtime, versionID string, filters entity.LogFilters, cursor *string) (entity.SearchLogsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchLogs", ctx, runtime, versionID, filters, cursor)
	ret0, _ := ret[0].(entity.SearchLogsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchLogs indicates an expected call of SearchLogs
func (mr *MockMonitoringServiceMockRecorder) SearchLogs(ctx, runtime, versionID, filters, cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLogs", reflect.TypeOf((*MockMonitoringService)(nil).SearchLogs), ctx, runtime, versionID, filters, cursor)
}

// GetMetrics mocks base method
func (m *MockMonitoringService) GetMetrics(ctx context.Context, runtime *entity.Runtime, versionID, startDate, endDate string) ([]entity.MetricRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", ctx, runtime, versionID, startDate, endDate)
	ret0, _ := ret[0].([]entity.MetricRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics
func (mr *MockMonitoringServiceMockRecorder) GetMetrics(ctx, runtime, versionID, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockMonitoringService)(nil).GetMetrics), ctx, runtime, versionID, startDate, endDate)
}
