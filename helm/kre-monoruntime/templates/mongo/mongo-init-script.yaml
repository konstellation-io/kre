apiVersion: v1
kind: ConfigMap
metadata:
  name: kre-mongo-init-script
  labels:
  {{- include "runtime.labels" . | nindent 4 }}

data:
  init-engine-admin.js: |
    conn = new Mongo();
    db = conn.getDB("kre");
    try {
        db.createRole({
        role: "readWriteMinusDropRole",
        privileges: [
        {
            resource: { db: "kre", collection: ""},
            actions: [ "collStats", "dbHash", "dbStats", "find", "killCursors", "listIndexes", "listCollections", "convertToCapped", "createCollection", "createIndex", "dropIndex", "insert", "remove", "renameCollectionSameDB", "update"]} ],
            roles: []
        }
        );
    } catch (e) {
        print("Role for readWriteMinusDropRole for 'kre' already exists")
    }

    try {
        db.createUser({user: "{{ .Values.mongodb.auth.adminUser }}", pwd: "{{ .Values.mongodb.auth.adminPassword }}", roles: [{role: 'readWriteMinusDropRole', db: "kre"}]})
    } catch (e) {
        print("User {{ .Values.mongodb.auth.adminUser }} admin for 'kre' database already exists")
    }

    try {
        db.getCollection('users').insert({
            "_id": "kre_admin_user",
            "email": "{{ .Values.config.admin.userEmail }}",
            "deleted": false,
            "accessLevel": "ADMIN",
            "creationDate": ISODate("2000-01-01T00:00:00.001Z")
            })
    } catch (error) {
        print("User {{ .Values.mongodb.mongodbUsername }} for KRE already exists")
    }


  init-runtime-admin.sh: |
    #!/bin/bash

    : "${FORKED:=}"
    if [ -z "${FORKED}" ]; then
    	echo >&2 'mongod for initdb is going to shutdown'
    	mongod --pidfilepath /tmp/docker-entrypoint-temp-mongod.pid --shutdown
    	echo >&2 'replica set will be initialized later'
    	FORKED=1 "${BASH_SOURCE[0]}" &
    	unset FORKED
    	mongodHackedArgs=(:) # bypass mongod --shutdown in docker-entrypoint.sh
    	return
    fi

    mongo=( mongo -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --host 127.0.0.1 --port 27017 --quiet )

    tries=30
    while true; do
    	sleep 1
    	if "${mongo[@]}" --eval 'quit(0)' &> /dev/null; then
    		# success!
    		break
    	fi
    	(( tries-- ))
    	if [ "$tries" -le 0 ]; then
    		echo >&2
    		echo >&2 'error: unable to initialize replica set'
    		echo >&2
    		kill -STOP 1 # initdb won't be executed twice, so fail loudly
    		exit 1
    	fi
    done

    echo 'about to initialize replica set'
    "${mongo[@]}" <<-EOF
    	rs.initiate({
    	  _id: "rs0",
    	  version: 1,
    	  members: [
    	    { _id: 0, host : "kre-mongo-0:27017" },
    	  ]
    	});
      wait_rs_ready = 15000;
      sleep(wait_rs_ready);
      db.auth('admin', $MONGO_INITDB_ROOT_PASSWORD)
      db = db.getSiblingDB('data')
      db.createUser({
        user: "$ME_CONFIG_MONGODB_AUTH_USERNAME",
        pwd: "$ME_CONFIG_MONGODB_AUTH_PASSWORD",
        roles: [{role: "read", db: "data"}], 
        mechanisms:["SCRAM-SHA-1"] 
      });
    EOF
